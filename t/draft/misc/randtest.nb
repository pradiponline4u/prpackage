(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     36070,        823]*)
(*NotebookOutlinePosition[     36738,        846]*)
(*  CellTagsIndexPosition[     36694,        842]*)
(*WindowFrame->Normal*)



Notebook[{
Cell["\<\
(*
 * Implementation of NIST Special Publication 800-22
 * \"Statistical Test Suite for Random and Psuedornadom
 *  Number Generators for Cryptographic Applications\"
 * 
 * http://modp.com/release/nist800-22/
 * Version 0.9.2 - 07-Oct-2006
 * Nick Galbreath  nickg [at] modp [dot] com
 * Copyright 2005, 2006
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the modp.com nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This is the standard \"new\" BSD license:
 * http://www.opensource.org/licenses/bsd-license.php
 *)\
\>", "Program",
  Editable->False,
  Evaluatable->True,
  InitializationCell->True,
  FontFamily->"Courier New"],

Cell[CellGroupData[{

Cell["\<\

WARNING\
\>", "Section"],

Cell[TextData[StyleBox["This is a preview release.  This needs to be turned \
into a package and documented. Interfaces and names will change. 07-Oct-2006 \
",
  FontWeight->"Bold"]], "Text",
  FontSize->16]
}, Open  ]],

Cell[CellGroupData[{

Cell["Common Code", "Section"],

Cell[BoxData[{
    \(<< Statistics`DataManipulation`\), "\n", 
    \(\(\(<< Statistics`NormalDistribution`\)\(\n\)\(\n\)
    \) (*\ Using\ RegExp\ is\ fastest, \ 
      but\ can\ only\ handle\ limited\ size\ *) \), "\[IndentingNewLine]", 
    \(\(\(StringPartition[s_String, \ m_Integer]\  := \ \[IndentingNewLine]If[
        m\  < \ 100, \[IndentingNewLine]StringCases[s, \ 
          Apply[StringExpression, \ Table[_, \ {m}]], \ 
          Overlaps \[Rule] False], \[IndentingNewLine]FromCharacterCode[
          Partition[ToCharacterCode[s], \ m]]]\)\(\n\)
    \)\), "\[IndentingNewLine]", 
    \(StringPartition[s_String, \ m_Integer, \ 
        1]\  := \[IndentingNewLine]StringCases[s, \ 
        Apply[StringExpression, \ Table[_, \ {m}]], \ 
        Overlaps \[Rule] True]\n\), "\[IndentingNewLine]", 
    \(BinaryString[x_Integer, \ n_Integer]\  := 
      StringJoin[
        Map[FromCharacterCode[# + 48]\  &, 
          IntegerDigits[x, 2, 
            n]]]\[IndentingNewLine]\), "\[IndentingNewLine]", 
    \(StringPartitionArray[s_String, \ m_Integer]\  := \ 
      FromCharacterCode[
        Partition[ToCharacterCode[s], \ m]]\[IndentingNewLine]\), "\n", 
    \(RandomBinaryString[m_Integer]\  := \ 
      FromCharacterCode[
        Table[Random[Integer] + 48, \ {m}]]\[IndentingNewLine]\n (*\ 
      Converts\ a\ string\ of\ "\<1\>"\ and\ "\<0\>"\ to\ a\ list\ of\ 0\ and\
\ 1\ *) \), "\[IndentingNewLine]", 
    \(BinaryStringToDigits[s_String]\  := \ 
      ToCharacterCode[s]\  - \ 48\), "\n", 
    \(BinaryStringToInteger[s_String]\  := \ 
      FromDigits[\ ToCharacterCode[s]\  - \ 48, \ 2]\)}], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.1 Monobit Frequency Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.1*) \)\(\n\)\(MonobitFrequencyTest[s_String]\  := \ 
      Module[{n\  = \ StringLength[s]}, \[IndentingNewLine]sn\  = 
          Apply[Plus, \((ToCharacterCode[s]\  - \ 48)\)*2 - 
              1]; \[IndentingNewLine]sobs\  = \ 
          Abs[sn]\ /\ \ Sqrt[n]; \[IndentingNewLine]pval = \ 
          Erfc[sobs\ /\ Sqrt[2]]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2 Block Frequency Test", "Section"],

Cell[BoxData[
    \(\(\( (*\ 2.2\ *) \)\(\[IndentingNewLine]\)\( (*\ 
      what\ is\ this?\ \ I\ \
\(forgot!\)\ \ nickg*) \)\(\[IndentingNewLine]\)\(BlockFrequencyTest2[
        s_String, \ m_Integer]\  := \ 
      Map[Count[#, 1] &, \ 
        Partition[\((ToCharacterCode[s]\  - \ 48)\), \ 
          m]]\n\[IndentingNewLine]
    BlockFrequencyTest[s_String, \ m_Integer]\  := \ 
      Module[{}, \[IndentingNewLine]freq\  = 
          Map[StringCount[#, \ "\<1\>"] &, \ StringPartition[s, \ m]]\ /\ 
            m; \[IndentingNewLine]n\  = \ 
          Length[freq]; \[IndentingNewLine]chisqr\  = \ 
          4*m*Apply[Plus, \ 
              Map[\((#\  - \ 1/2)\)^2 &, \ 
                freq]]; \[IndentingNewLine]pval\  = \ 
          GammaRegularized[\ n/2, \ 
            chisqr\ /2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3 Runs Test", "Section"],

Cell[BoxData[
    \( (*\ 
      MUST\ DO\ FREQUENCY\ CHECK\ \(FIRST\ --\)\ THIS\ TEST\ NOT\ VALID\ IF\ \
2.1\ FAILS\ *) \)], "Input"],

Cell[BoxData[
    \(\(\( (*2.3*) \)\(\[IndentingNewLine]\)\(RunsTest[
          s_String]\  := \ \[IndentingNewLine]Module[{n\  = \ 
              StringLength[s]}, \[IndentingNewLine]pi\  = \ 
            StringCount[s, \ "\<1\>"]\ /\ n; \[IndentingNewLine] (*\ 
            the\ regexp\ counts\ number\ of\ runs\ of\ 1  s\ and\ 0  
              s\ *) \[IndentingNewLine]vobs\  = \ 
            StringCount[s, 
              RegularExpression["\<0+|1+\>"]]; \[IndentingNewLine]pval\  = \ 
            Erfc[\((vobs\  - \ 2\ *\ n\ *\ pi*\((1 - pi)\))\)/\ \((2*
                    pi*\((1 - pi)\)*
                    Sqrt[2*n])\)]; \[IndentingNewLine]pval\  \[GreaterEqual] \
\ 0.01\[IndentingNewLine]];\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.4 Longest Runs Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.4*) \)\(\n\)\(LongestRunOnes8[
        s_String]\  := \ \[IndentingNewLine]Module[{m = 8, \ k = 3, \ 
          n = \ 16, \ 
          pik\  = \ {0.2148, \ 0.3672, \ 0.2305, \ 
              0.1875}}, \[IndentingNewLine]blocks\  = \ 
          StringPartition[s, \ m]; \[IndentingNewLine]counts\  = \ 
          Map[\ Max[1, \ 
                Min[4, Max[StringLength[StringSplit[#, \ "\<0\>"]]]]] &, \ 
            blocks]; \[IndentingNewLine]freqs\  = \ 
          Table[Count[counts, \ i], \ {i, 1, 
              4}]; \[IndentingNewLine]chisqr\  = \ 
          Apply[Plus, 
            MapThread[\ \((\((#1\  - \ 
                          n*\ #2)\)\ ^2)\)\ /\ \((n\ *\ #2)\) &, \ {freqs, \ 
                pik}]]; \[IndentingNewLine]pval\  = \ 
          GammaRegularized[k/2, \ 
            chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\[IndentingNewLine]\[IndentingNewLine]
    LongestRunsOnes128[
        s_String]\  := \[IndentingNewLine]Module[{blocks, m = 128, \ k = 5, \ 
          n = \ 49, \ 
          pik\  = \ {0.1174, \ 0.2430, \ 0.2493, \ 0.1752, \ 0.1027, 
              0.1124}}, \[IndentingNewLine]blocks\  = \ 
          StringPartition[s, \ m]; \[IndentingNewLine]counts\  = \ 
          Map[\ Max[1, \ 
                Min[4, Max[StringLength[StringSplit[#, \ "\<0\>"]]]]] &, \ 
            blocks]; \[IndentingNewLine]chisqr\  = \ 
          Apply[Plus, 
            MapThread[\ \((\((#1\  - \ 
                          n*\ #2)\)\ ^2)\)\ /\ \((n\ *\ #2)\) &, \ {counts, \ 
                pik}]]; \[IndentingNewLine]pval\  = \ 
          GammaRegularized[k/2, \ 
            chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\n\[IndentingNewLine]
    LongestRunsOnes10000[
        s_String]\  := \[IndentingNewLine]Module[{blocks, m = 10^4, \ 
          k = 6, \ n = \ 75, \ 
          pik\  = \ {0.0882, \ 0.2092, \ 0.2483, \ 0.1933, \ 0.1208, 
              0.0675, \ 0.0727}}, \[IndentingNewLine]blocks\  = \ 
          StringPartition[s, \ m]; \[IndentingNewLine]counts\  = \ 
          Map[\ Max[1, \ 
                Min[4, Max[StringLength[StringSplit[#, \ "\<0\>"]]]]] &, \ 
            blocks]; \[IndentingNewLine]chisqr\  = \ 
          Apply[Plus, 
            MapThread[\ \((\((#1\  - \ 
                          n*\ #2)\)\ ^2)\)\ /\ \((n\ *\ #2)\) &, \ {counts, \ 
                pik}]]; \[IndentingNewLine]pval\  = \ 
          GammaRegularized[k/2, \ 
            chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.5 Binary Matrix Rank Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.5*) \)\(\[IndentingNewLine]\)\(BinaryMatrixRankTest[
          s_String, \ m_:  32, \ q_:  32]\  := \ 
        Module[{}, \[IndentingNewLine]r\  = 
            Map[MatrixRank[#, \ Modulus \[Rule] 2] &, 
              Partition[Partition[\((ToCharacterCode[s]\  - \ 48)\), \ m], \ 
                q]]; \[IndentingNewLine]n\  = \ 
            Length[r]; \[IndentingNewLine]fm\  = \ 
            Count[r, \ m]; \[IndentingNewLine]fm1\  = \ 
            Count[r, \ 
              m - 1]; \[IndentingNewLine]chisqr\  = \ \((\((fm\  - \ 
                        0.2888\ n)\)^2)\)/\((0.2888  
                    n)\)\  + \ \((\((fm1\  - \ 
                        0.5776\ n)\)^2)\)/\((0.5776\ n)\)\  + \ \((\((n\  - \ 
                        fm\  - fm1\  - \ 
                        0.1336  
                          n)\)^2)\)/\((0.1336\ n)\); \[IndentingNewLine]pval\ \
 = \ Power[E, \ \(-chisqr\)\ /\ 
                2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\[IndentingNewLine]];\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.6 Spectral Test", "Section"],

Cell["\<\
The spectral test can be visualized after running the test \
using\
\>", "Text"],

Cell["\<\
ListPlot[dstreal, Axes\[Rule]False, Frame\[Rule]True, PlotRange\
\[Rule]{Automatic, {t, Max[dstreal]}}]\
\>", "Program"],

Cell[BoxData[
    \(\(\( (*2.6*) \)\(\[IndentingNewLine]\)\(SpectralTest[str_String]\  := \ 
        Module[{n\  = \ StringLength[str], \ str2, \ 
            dst}, \[IndentingNewLine]str2\  = \ \((ToCharacterCode[str]\  - \ 
                    48)\)*2 - 1; \[IndentingNewLine]dst\  = \ 
            Fourier[str2, \ \ FourierParameters \[Rule] {1, \(-1\)}]; \
\[IndentingNewLine]dstreal\  = Take[Abs[dst], \ n/2]; \[IndentingNewLine]t = 
            Sqrt[3\ *n]; \[IndentingNewLine]n0\  = \ 
            0.95\ *n\ /\ 2; \[IndentingNewLine]n1\  = \ 
            Length[Select[
                dstreal, \ # < t &]]; \[IndentingNewLine]d = \ \((n1\  - \ 
                  n0)\)\ /\ 
              Sqrt[n\ *\ 0.95\ *\ 0.05\ /\ 2]; \[IndentingNewLine]pval\  = \ 
            Erfc[Abs[d]\ /\ 
                Sqrt[2]]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\[IndentingNewLine]];\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.7 Non-overalpping Template Matching Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.7*) \)\(\[IndentingNewLine]\)\( (*\ \[IndentingNewLine]s\  = \ 
        input, \[IndentingNewLine]b\  = \ \(template\ string\)\
\[IndentingNewLine]\(M\  = \ 
            blocks\ length\)\[IndentingNewLine]*) \)\(\[IndentingNewLine]\)\(\
NonOverlappingTemplateMatching[s_String, \ b_String, \ 
          M_:  131072]\  := \[IndentingNewLine]Module[{m\  = \ 
              StringLength[
                b]}, \[IndentingNewLine] (*\(\(\ \)\(if\ b\  < \ 2\  || \ 
                  b\  > \ 
                    21\)\()\)\)\ error\ *) \[IndentingNewLine]blocks\  = \ 
            StringPartition[s, M]; \[IndentingNewLine]counts\  = \ 
            Map[StringCount[#, \ b] &, \ 
              blocks]; \[IndentingNewLine]avg\  = \ 
            N[\((M\  - \ m + 1)\)/\((2^m)\)]; \[IndentingNewLine]var\  = \ 
            N[M*\((2^\(-m\)\  - \ \((2*m\  - 
                          1)\)*2^\((\(-2\)*
                            m)\))\)]; \[IndentingNewLine]chisqr\  = \ 
            Sum[\((counts[\([i]\)]\  - \ \ avg)\)^2, \ {i, 1, \ 
                  Length[counts]}]\ /\ var; \[IndentingNewLine]pval\  = \ 
            GammaRegularized[Length[blocks]/2, \ 
              chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\[IndentingNewLine]];\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.8 Overlapping Template Matching Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.8*) \)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\( (*\ 
      crazy\ function\ to\ compute\ values\ *) \)\(\[IndentingNewLine]\)\(Pr[
        0, \ x_]\  := \ Power[E, \ \(-x\)]\n
    \(Pr[u_Integer, \ x_]\  := 
        x*\((E^\(-x\))\)*\((2^\(-u\))\)*\ 
          Sum[\ Binomial[u - 1, \ i\  - \ 1]*\((x^\((i - 1)\))\)/
                Factorial[i], \ {i, \ 1, 
              u}];\)\[IndentingNewLine] (*\(\(\(\ \)\(OR\[IndentingNewLine]
          
          Pr[u_Integer, \ 
              x_]\  := \ \ x*\((E^\(-\((2  x)\)\))\)*\((2^\(-u\))\)*
              Hypergeometric1F1[u + 1, 2, \ 
                x]\)\(]\)\);\)\[IndentingNewLine]*) \[IndentingNewLine]\
\[IndentingNewLine]
    \(OverlapingTemplateMatching[s_String, \ b_String, \ M_:  1032, \ 
          K_:  5]\  := \ \[IndentingNewLine]Module[{}, \ \[IndentingNewLine]n\
\  = \ StringLength[s]; \[IndentingNewLine]bigN\  = \ 
            Floor[n/\ M]; \[IndentingNewLine]m\  = \ 
            StringLength[b]; \[IndentingNewLine]lambda\  = \ 
            N[\((M - \ \ m\  + 
                    1)\)*\((2^\(-m\))\)]; \[IndentingNewLine]eta\  = \ 
            lambda\ /\ 2; \[IndentingNewLine]pi\  = \ 
            Table[Pr[i, \ eta], {i, \ 0, \ 
                K - 1}]; \[IndentingNewLine]AppendTo[pi, \ 
            1 - \ Apply[Plus, \ pi]]; \[IndentingNewLine]v\  = \ 
            Table[0, \ {K + 
                  1}]; \[IndentingNewLine] (*\(\(\ \)\(if\ b\  < \ 2\  || \ 
                  b\  > \ 
                    21\)\()\)\)\ error\ *) \[IndentingNewLine]blocks\  = \ 
            StringPartition[s, \ M]; \[IndentingNewLine]blockLen\  = \ 
            StringLength[blocks[\([1]\)]]; \[IndentingNewLine] (*\ 
            count\ occurances, \ but\ if\ more\ than\ K, \ 
            just\ make\ it\ K\ *) \[IndentingNewLine]counts\  = \ 
            Map[Min[StringCount[#, \ b, \ Overlaps \[Rule] True], \ K] &, \ 
              blocks]; \[IndentingNewLine]Scan[\((\(v[\([# + 
                        1]\)]++\))\) &, \ 
            counts]; \[IndentingNewLine]chisqr\  = \ 
            Sum[\ \((\((v[\([i]\)]\  - \ bigN*\ pi[\([i]\)]\ )\)^2)\)/\((bigN*
                    pi[\([i]\)])\), \ \ {i, 1, 
                K + 1}]; \[IndentingNewLine]pval\  = \ 
            GammaRegularized[K/2, \ 
              chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\[IndentingNewLine]];\)\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.9 Marurer's Universal Statistic Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.9*) \)\(\[IndentingNewLine]\)\(MaurersUniversalStatisticTest[
        s_String, \ L_Integer, \ 
        q_Integer]\  := \[IndentingNewLine]Module[\[IndentingNewLine] (*\ 
          Table\ comes\ from\ \ section\ \ 5.4  .5\ of\ Handbook\ of\ Applied\
\ Cryptography\ *) {ru\  = \ {{0.7326495, \ 0.690}, \ {1.5374383, \ 
                1.338}, \ {2.4016068, \ 1.901}, \ {3.3112247, \ 
                2.358}, \ {4.2534266, \ 2.705}, \ {5.2177052, \ 
                2.954}, \ {6.1962507, \ 3.125}, \ {7.1836656, \ 
                3.238}, \ {8.1764248, \ 3.311}, \ {9.1723243, \ 
                3.356}, \ {10.170032, \ 3.384}, \ {11.168765, \ 
                3.401}, \ {12.168070, \ 3.410}, \ {13.167693, \ 
                3.416}, \ {14.167488, \ 3.419}, \ {15.167379, \ 
                3.421}}}, \[IndentingNewLine] (*\ 
          TURN\ INTO\ LIST\ OF\ NUMBERS\ 1\  - \ 
            2^L\ *) \[IndentingNewLine]blocks\  = \ 
          Map[1\  + \ FromDigits[#, \ 2] &, \ 
            Partition[ToCharacterCode[s]\  - \ 48, \ 
              L]]; \[IndentingNewLine]k\  = \ 
          Length[blocks]\  - \ q; \[IndentingNewLine]states\  = \ 
          Table[0, \ {i, 2^L}]; \[IndentingNewLine] (*\ 
          do\ initialization\ *) \[IndentingNewLine]Do[\ 
          states[\([\ blocks[\([i]\)]\ ]\)]\  = \ i\ , \ {i, 1, \ 
            q}]; \[IndentingNewLine]sum = \ 
          0.0; \[IndentingNewLine]Do[\ \ sum\  += 
            Log[2, \ i\  - \ 
                states[\([\ 
                    blocks[\([i]\)]\ ]\)]]; \[IndentingNewLine]states[\([\ 
                blocks[\([i]\)]\ ]\)]\  = \ i, \ {i, \ q + 1, \ 
            Length[blocks]}\[IndentingNewLine]]; \[IndentingNewLine]fn\  = \ 
          sum\ /\ k; \[IndentingNewLine]pval\  = \ 
          Erfc[Abs[fn\  - \ ru[\([L, \ 1]\)]\ ]\ /\ 
              Sqrt[2\ *\ 
                  ru[\([L, 
                      2]\)]\ ]\ ]; \[IndentingNewLine]pval\  \[GreaterEqual] \
\ 0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.10 Lempel-Ziv Compression Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.10*) \)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\( (*\ 
      This\ is\ the\ slow\ but\ simple\ way . \ 
          Good\ for\ illustration\ *) \)\(\n\)\(LempelZivCompressionTestSlow[
          s_String]\  := \[IndentingNewLine]Module[{i\  = \ 1, \ j\  = \ 0, \ 
            n\  = \ StringLength[s], \ tmp, \ \[Mu]\  = \ 69586.25, \ 
            sigma\  = \ 
              70.448718}, \[IndentingNewLine]words\  = \ {}; \
\[IndentingNewLine]While[\ 
            i\  + j\ \  \[LessEqual] \ n, \[IndentingNewLine]tmp\  = \ 
              StringTake[s, \ {i, \ i + j}]; \[IndentingNewLine]If[
              MemberQ[words, \ 
                tmp], \ \[IndentingNewLine]\(j++\), \
\[IndentingNewLine]\((AppendTo[words, \ tmp]; \ i\  += \ j + 1; \ 
                j\  = \ 
                  0)\)];\[IndentingNewLine]]; \[IndentingNewLine]wobs\  = \ 
            Length[words]; \[IndentingNewLine]pval\  = \ 
            Erfc[\((\[Mu]\  - \ wobs\ )\)/Sqrt[2*sigma]]\ /
              2; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\ \[IndentingNewLine]];\)\)\)], "Input",
  InitializationCell->True],

Cell[TextData[{
  "\nInstead of linear searching, this uses the \"hash-table\" trick,\n",
  ButtonBox["http://library.wolfram.com/conferences/devconf99/lichtblau/Links/\
index_lnk_5.html",
    ButtonData:>{
      URL[ 
      "http://library.wolfram.com/conferences/devconf99/lichtblau/Links/index_\
lnk_5.html"], None},
    ButtonStyle->"Hyperlink"]
}], "Text",
  InitializationCell->True],

Cell[BoxData[
    \(\(LempelZivCompressionTest[
          s_String]\  := \[IndentingNewLine]Module[{minj\  = \ 0, 
            i\  = \ 1, \ j\  = \ 0, \ n\  = \ StringLength[s], \ 
            tmp, \ \[Mu]\  = \ 69586.25, \ sigma\  = \ 70.448718, \ words, \ 
            wordlen}, \[IndentingNewLine]s2\  = \ 
            BinaryStringToDigits[s]; \[IndentingNewLine]wobs\  = \ 
            0; \[IndentingNewLine]While[\ 
            i\  + j\ \  \[LessEqual] \ 
              n, \[IndentingNewLine]tmp\  = \ \ s2[\([\ 
                  Range[\ i, \ i + j]\ ]\)]; \[IndentingNewLine]If[
              Head[words[tmp]]\  =!= \ words, \ \(j++\); \ 
              Continue[]]; \[IndentingNewLine]words[tmp]\  = \ 
              tmp; \[IndentingNewLine]\ \(++wobs\); \[IndentingNewLine]i\  \
+= \ j + 1; \[IndentingNewLine] (*\ optimization, \ 
              if\ we\ got\ all\ the\ words\ of\ a\ certain\ length, \
\[IndentingNewLine]then\ skip\ over\ them . \ \ This\ shaves\ 30  %\ off\ the\
\ runtime\ *) \[IndentingNewLine]If[Head[wordlen[j]]\  === \ wordlen, 
              wordlen[j]\  = 
                Power[2, \ j + 1] - 1, \ \(--wordlen[
                  j]\)]; \[IndentingNewLine]If[
              wordlen[minj]\  \[Equal] \ 
                0, \ \(++minj\)]; \[IndentingNewLine]\ 
            j\  = \ minj\[IndentingNewLine]]; \[IndentingNewLine]pval\  = \ 
            Erfc[\((\[Mu]\  - \ wobs\ )\)/Sqrt[2*sigma]]\ /
              2; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\ \[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.11 Linear Complexity Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.11*) \)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\(\n\)\( \
(*\ Just\ computes\ the\ linear\ complexity . \[IndentingNewLine]\ \ \
Compiling\ this\ gives\ 10  
        x\ boost\ *) \)\(\[IndentingNewLine]\)\(\(LinearComplexity\  = \ 
        Compile[{{u, \ _Integer, \ 1}}, \ 
          Module[{len\  = \ Length[u], \ b, c, d, p, tmp, \ l = 0, \ 
              m = 0, \ }, \[IndentingNewLine]c = 
              ReplacePart[Table[0, \ {len}], \ 1, 1]; \[IndentingNewLine]b = 
              ReplacePart[Table[0, \ {len}], \ 1, 
                1]; \[IndentingNewLine]Do[\[IndentingNewLine]d = \ 
                Mod[u[\([n]\)]\  + \ 
                    Dot[\ Take[c, \ {2, \ l + 1}], 
                      Reverse[Take[u, {n - l\ , \ n - 1\ }]]], \ 
                  2]; \[IndentingNewLine]If[
                d \[Equal] 1, \[IndentingNewLine]tmp\  = \ 
                  c; \[IndentingNewLine]p\  = \ 
                  Table[0, \ {len}]; \[IndentingNewLine]Do[\ \ If[
                    b[\([i]\)]\  \[Equal] 1, 
                    p[\([i + n - m]\)]\  = \ 1], \ {i, 1, \ 
                    l + 1}]; \[IndentingNewLine]c\ \  = \ 
                  Mod[c + p, \ 2]; \[IndentingNewLine]If[
                  2*l\  \[LessEqual] \ n, \[IndentingNewLine]l\  = \ 
                    n\  - l; \[IndentingNewLine]m\  = \ 
                    n; \[IndentingNewLine]b\  = \ 
                    tmp;\[IndentingNewLine]];\[IndentingNewLine]], \ {n, \ 
                1, \ len}]; \[IndentingNewLine]l\[IndentingNewLine]]\
\[IndentingNewLine]];\)\[IndentingNewLine]\[IndentingNewLine] (*\ 
      m\  = \ length\ of\ bits\ in\ block\ *) \[IndentingNewLine]
    \(LinearComplexityTest[s_String, \ 
          m_Integer]\  := \[IndentingNewLine]Module[{k = 6, \ 
            pi = {0.01047, \ 0.03125, \ 0.125, 0.5, 0.25, 0.0625, \ 
                0.02078}}, \[IndentingNewLine] (*\ 
            theoretical\ average\ of\ what\ the\ Linear\ Complexity\ \
*) \[IndentingNewLine]avg\  = \ \((m/
                  2)\)\  + \ \((9\  + \ Power[\(-1\), \ m\  + 1])\)/
                36\  - \ \((m/3\  + \ 2/9)\)/
                Power[2, m]; \[IndentingNewLine] (*\ 
            blocks\ *) \[IndentingNewLine]blocks\  = \ 
            StringPartition[s, m]; \[IndentingNewLine] (*\ 
            number\ of\ blocks\ *) \[IndentingNewLine]bigN\  = \ 
            Length[blocks]; \[IndentingNewLine]\[IndentingNewLine] (*\ 
            get\ lc\ for\ each\ block\ *) \[IndentingNewLine]lc\  = \ 
            Map[LinearComplexity[BinaryStringToDigits[#]] &, \ 
              blocks]; \[IndentingNewLine]chisqr\  = \ 
            Sum[Power[v[\([i]\)]\  - \ bigN\ *pi[\([i]\)], 
                  2]\ /\ \((bigN\ *\ pi[\([i]\)])\), \ {i, 1, \ 
                Length[v]}]; \[IndentingNewLine]t\  = \ 
            Map[\((Power[\(-1\), \ m]*\((#\  - \ avg)\)\  + \ 2/9)\) &, \ 
              lc]; \[IndentingNewLine] (*\ 
            spec\ says\ Ti\  \[LessEqual] \ \(-2.5\), \ etc, \ 
            while\ RangeCount\ is\ ti\  < \ \(-2.5\), \ 
            should\ make\ no\ practical\ difference\ *) \[IndentingNewLine]v\ \
 = \ Reverse[\ 
              RangeCounts[\(-1\)*t, \ {\ \(-2.5\), \ \(-1.5\), \ \(-0.5\), \ 
                  0.5, \ 1.5, \ 2.5}]]; \[IndentingNewLine]chisqr\  = \ 
            Sum[\ Power[\ v[\([i]\)]\  - \ bigN*pi[\([i]\)], 
                  2]/\ \((bigN\ *\ pi[\([i]\)])\), \ {i, 1, \ 
                Length[v]}]; \[IndentingNewLine]pval\  = \ 
            GammaRegularized[k/2, \ 
              chisqr\ /\ 2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
            0.01\[IndentingNewLine]];\)\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.12 Serial Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.12*) \)\(\n\)\( (*\ 
      TODO : \ change\ psmi\ to\ something\ more\ natural\ looking . \ It' 
          s\ the\ sum\ of\ squares\ of\ the\ first\ part\ of\ the\ lst\ *) \)\
\(\[IndentingNewLine]\)\( (*\ 
      TODO : \ make\ stringpartition\ do\ the\ wrap\ around\ *) \)\(\
\[IndentingNewLine]\)\(SerialTest[s_String, \ 
        m_Integer]\  := \[IndentingNewLine]Module[{}, \[IndentingNewLine]n\  \
= \ StringLength[s]; \[IndentingNewLine]f1\  = \ 
          Frequencies[
            StringPartition[StringJoin[s, StringTake[s, m - 1]], m, 
              1]]; \[IndentingNewLine]f2\  = \ 
          Frequencies[
            StringPartition[StringJoin[s, \ StringTake[s, m - 2]], m - 1, 
              1]]; \[IndentingNewLine]f3\  = \ 
          Frequencies[
            StringPartition[StringJoin[s, \ StringTake[s, m - 3]], m - 2, 
              1]]; \[IndentingNewLine]psim1\  = \ 
          0; \[IndentingNewLine]psim2\  = \ 0; \[IndentingNewLine]psim3\  = \ 
          0; \[IndentingNewLine]\[IndentingNewLine]If[
          m\  \[GreaterEqual] \ 0, 
          psim1\  = \ 
            Power[2, 
                  m]\ *\ \ Fold[Plus[#1, \ Power[Part[#2, 1], \ 2]] &, \ 0, \ 
                    f1]\ /n\  - n]; \[IndentingNewLine]If[
          m\  \[GreaterEqual] \ 1, \[IndentingNewLine]psim2\  = \ 
            Power[2, 
                  m - 1]\ *\ \ Fold[Plus[#1, \ Power[Part[#2, 1], \ 2]] &, \ 
                    0, \ f2]\ /n\  - n]; \[IndentingNewLine]If[
          m\  \[GreaterEqual] \ 2, \[IndentingNewLine]psim3\  = \ 
            Power[2, 
                  m - 2]\ *\ \ Fold[Plus[#1, \ Power[Part[#2, 1], \ 2]] &, \ 
                    0, \ f3]\ /n\  - n]; \[IndentingNewLine]d1\  = \ 
          psim1\  - \ psim2; \[IndentingNewLine]d2\  = \ 
          psim1\  - \ 2*psim2\  + \ 
            psim3; \[IndentingNewLine]pval\  = \ {GammaRegularized[
              2^\((m - 2)\), d1/2], \ \ GammaRegularized[2^\((m - 3)\), 
              d2/2]}; \[IndentingNewLine]Map[\((#\  \[GreaterEqual] \ 
                0.01)\) &, \ pval]\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.13 Approximate Entropy Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.13*) \)\(\[IndentingNewLine]\)\(ApproximateEntropyTest[
        s_String, \ 
        m_Integer]\  := \[IndentingNewLine]Module[{n\  = \ 
            StringLength[s]}, \[IndentingNewLine]f1\  = \ 
          Frequencies[
            StringPartition[StringJoin[s, StringTake[s, m - 1]], m, 
              1]]; \[IndentingNewLine]f2\  = \ 
          Frequencies[
            StringPartition[StringJoin[s, \ StringTake[s, m]], m + 1, 
              1]]; \[IndentingNewLine]c1\  = \ 
          Map[#[\([1]\)] &, \ f1]\ /\ n; \[IndentingNewLine]c2\  = \ 
          Map[#[\([1]\)] &, \ f2]\ /\ n; \[IndentingNewLine]phi1\  = \ 
          Apply[Plus, \ 
            Map[#\ Log[#] &, \ c1]]; \[IndentingNewLine]phi2\  = \ 
          Apply[Plus, \ 
            Map[#\ Log[#] &, \ c2]]; \[IndentingNewLine]apen\  = \ 
          phi1\  - \ phi2; \[IndentingNewLine]chisqr\  = \ 
          2  n \((Log[2]\  - apen)\); \[IndentingNewLine]pval\  = 
          GammaRegularized[2^\((m - 1)\), 
            chisqr/2]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.14 Cumulative Sums Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.14*) \)\(\[IndentingNewLine]\)\(CumulativeSumsTest[
        s_String]\  := \ 
      Module[\ {n\  = \ StringLength[s], cs, \ 
          ndist\  = \ NormalDistribution[0, 1]}, \[IndentingNewLine]cs\  = \ 
          CumulativeSums[\ \((ToCharacterCode[s]\  - \ 48)\)*2 - 
              1]; \[IndentingNewLine]z\  = 
          Max[Abs[cs]]; \[IndentingNewLine]pval = \ 
          1 - Apply[Plus, \ 
              Table[CDF[ndist, \ \((4  k + 1)\) z/Sqrt[n]]\  - \ 
                  CDF[ndist, \ \((4  k - 1)\) z/Sqrt[n]], \ {k, \ 
                  Floor[\((\(-Floor[n/z]\)\  + \ 1)\)/4], \ 
                  Floor[\((Floor[n/z]\  - 1)\)/4]}]]\  + \ 
            Apply[Plus, 
              Table[CDF[ndist, \((4  k + 3)\) z/Sqrt[n]]\  - \ 
                  CDF[ndist, \ \((4  k + 1)\) z/Sqrt[n]], \ {k, \ 
                  Floor[\((\(-Floor[n/z]\)\  - 3)\)/4], \ 
                  Floor[\((Floor[n/z]\  - 1)\)/
                      4]}]]; \[IndentingNewLine]pval\  \[GreaterEqual] \ 
          0.01\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.15 Random Excursions Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.15*) \)\(\n\)\( (*\ given\ a\ list\ of\ cycles, \ 
      count\ the\ number\ of\ times\ x\ appears\ in\ each\ *) \)\(\
\[IndentingNewLine]\)\(\(freqCycles[cycles_List, \ x_Integer]\  := \ 
        Module[{tmp}, \ 
          tmp\  = \ 
            Map[Min[{5, \ Count[#, \ x]}] &, \ cycles]; \[IndentingNewLine]\ 
          Table[Count[tmp, \ i], \ {i, 0, 5}]\[IndentingNewLine]];\)\n
    \(Remove[pik];\)\n
    \(pik[0, \ x_]\  := \ 1\  - \ 1/\((2*Abs[x])\);\)\n
    \(pik[k_, \ 
          x_]\  := \ \((1/\((4*x*x)\))\) \((1 - 1/\((2*Abs[x])\))\)^\((k - 
                1)\);\)\n
    \(pik[5, \ 
          x_]\  := \ \((1/\((2*Abs[x])\))\) \((1 - 1/\((2*Abs[x])\))\)^4;\)\n
    \(xvals\  = \ {\(-4\), \(-3\), \(-2\), \(-1\), 1, 2, 3, 4};\)\n
    \(pikTable\  = \ Map[Table[\ pik[i, \ #], \ {i, 0, 5}] &\ , \ xvals];\)\n
    \(achisqr[x_, \ y_, \ j_]\  := \ 
        Apply[Plus, 
          MapThread[\ \((\((#1\  - \ j*#2)\)^2)\)/\((j\ *\ #2)\) &, \ {x, \ 
              y}]];\)\n
    \(RandomExcursionsTest[
          str_String]\  := \[IndentingNewLine]Module[{}, \ \
\[IndentingNewLine] (*\ make\ cumulative\ sums, \ 
            and\ add\ zeros\ at\ start\ and\ end\ \
*) \[IndentingNewLine]cumsum\  = \ 
            Flatten[{0, 
                CumulativeSums[\((ToCharacterCode[str]\  - \ 48)\)*2 - 
                    1\ ], \ 0}]; \[IndentingNewLine] (*\ 
            Find\ where\ the\ zeros\ are, \ 
            and\ group . \[IndentingNewLine]\ The\  + 
              1, \ \(-1\)\ are\ the\ positions\ of\ start\ and\ end\ of\ a\ \
cycle*) \[IndentingNewLine]cyclePositions\  = \ 
            Partition[Flatten[Position[cumsum, \ 0]], \ 2, \ 
              1]; \[IndentingNewLine] (*\ 
            make\ a\ list\ of\ cycles\ *) \[IndentingNewLine]cycles\  = \ 
            Map[Take[cumsum, \ #] &, \ 
              cyclePositions]; \[IndentingNewLine]j\  = \ 
            Length[cycles]; \[IndentingNewLine]stateCyclesTable\  = \ 
            Map[freqCycles[cycles, #] &, \ xvals]; \[IndentingNewLine] (*\ 
            with\ the\ freq\ cycles, \ 
            and\ the\ pi\ table\ compute\ chisqr\ for\ a\ state\
*) \[IndentingNewLine]chisqr\  = 
            MapThread[
              achisqr[#1, \ #2, \ j] &, \ {stateCyclesTable, \ 
                pikTable}]; \[IndentingNewLine]pval\  = \ 
            Map[GammaRegularized[\ 5/2, \ #/2] &, \ 
              chisqr]; \[IndentingNewLine]Map[#\  \[GreaterEqual] \ 0.01 &, \ 
            pval]\[IndentingNewLine]];\)\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.16 Random Excusions Variant Test", "Section"],

Cell[BoxData[
    \(\(\( (*2.16*) \)\(\[IndentingNewLine]\)\( (*\ 
      helper\ function\ *) \)\(\[IndentingNewLine]\)\(\(getFreq[f_List, \ 
          x_]\  := \ Module[{result}, \[IndentingNewLine]result\  = \ 
            Select[f, \ #[\([2]\)]\  \[Equal] \ x\  &]; \[IndentingNewLine]If[
            Length[result] \[Equal] 0, \ 0, \ 
            result[\([1, 
                1]\)]]\[IndentingNewLine]];\)\[IndentingNewLine]\
\[IndentingNewLine]
    RandomExcursionsVariantTest[
        s_String]\  := \[IndentingNewLine]Module[{}, \ 
        cumsum\  = \ 
          CumulativeSums[\((ToCharacterCode[s]\  - \ 48)\)*2 - 
              1\ ]; \[IndentingNewLine]freq\  = \ 
          Select[Frequencies[cumsum], \ 
            Abs[#[\([2]\)]\ ]\  \[LessEqual] \ 
                9\  &]; \[IndentingNewLine]j\  = \ 
          getFreq[freq, \ 0] + 1; \[IndentingNewLine]pval\  = 
          Map[\ {#, 
                Erfc[Abs[getFreq[freq, #]\  - \ j]/
                    Sqrt[2\ *
                        j*\((4*Abs[#]\  - \ 
                            2)\)]]} &, \ {\(-9\), \(-8\), \(-7\), \(-6\), \
\(-5\), \(-4\), \(-3\), \(-2\), \(-1\), 1, 2, 3, 4, 5, 6, 7, 8, 
              9}]; \[IndentingNewLine]Map[{#[\([1]\)], #[\([2]\)] \
\[GreaterEqual] \ 0.01} &, \ pval]\[IndentingNewLine]]\)\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Change Log", "Section"],

Cell[CellGroupData[{

Cell["26-Jun-05", "Subsection"],

Cell["Initial release 0.90", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["06-Jul-05 - 0.9.1", "Subsection"],

Cell["\<\
> 20x improvement in LinearComplexity!  The test should now run in \
under 3 minutes. The symbolic computations were replaced with custom (more \
c-like) arrays.  This provided 2x.  Then compiling the function added 10x \
more!\
\>", "Text"],

Cell["Cleanup of some variable names", "Text"],

Cell["Serial Test cleaned up to return both P-values as a list", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["07-Oct-06 0.9.2", "Subsection"],

Cell["Cleaned up Spectral Test and a few others.", "Text"]
}, Open  ]]
}, Open  ]]
},
FrontEndVersion->"5.2 for Macintosh",
ScreenRectangle->{{0, 1024}, {0, 742}},
AutoGeneratedPackage->Automatic,
WindowSize->{913, 715},
WindowMargins->{{6, Automatic}, {Automatic, 0}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{
Cell[1754, 51, 2068, 46, 681, "Program",
  Evaluatable->True,
  InitializationCell->True],

Cell[CellGroupData[{
Cell[3847, 101, 35, 3, 91, "Section"],
Cell[3885, 106, 207, 4, 54, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[4129, 115, 30, 0, 69, "Section"],
Cell[4162, 117, 1655, 32, 363, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[5854, 154, 45, 0, 69, "Section"],
Cell[5902, 156, 479, 8, 123, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[6418, 169, 43, 0, 69, "Section"],
Cell[6464, 171, 918, 19, 203, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[7419, 195, 32, 0, 69, "Section"],
Cell[7454, 197, 133, 3, 27, "Input"],
Cell[7590, 202, 749, 13, 155, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[8376, 220, 40, 0, 69, "Section"],
Cell[8419, 222, 2670, 51, 475, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[11126, 278, 46, 0, 69, "Section"],
Cell[11175, 280, 1078, 20, 187, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[12290, 305, 36, 0, 69, "Section"],
Cell[12329, 307, 90, 3, 30, "Text"],
Cell[12422, 312, 130, 3, 40, "Program"],
Cell[12555, 317, 942, 16, 203, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[13534, 338, 61, 0, 69, "Section"],
Cell[13598, 340, 1338, 23, 283, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[14973, 368, 57, 0, 69, "Section"],
Cell[15033, 370, 2456, 44, 491, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[17526, 419, 57, 0, 69, "Section"],
Cell[17586, 421, 2037, 36, 363, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[19660, 462, 51, 0, 69, "Section"],
Cell[19714, 464, 1142, 20, 267, "Input",
  InitializationCell->True],
Cell[20859, 486, 389, 10, 64, "Text",
  InitializationCell->True],
Cell[21251, 498, 1571, 27, 331, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[22859, 530, 46, 0, 69, "Section"],
Cell[22908, 532, 3681, 62, 763, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[26626, 599, 35, 0, 69, "Section"],
Cell[26664, 601, 2144, 39, 395, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[28845, 645, 48, 0, 69, "Section"],
Cell[28896, 647, 1152, 22, 235, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[30085, 674, 44, 0, 69, "Section"],
Cell[30132, 676, 1095, 20, 203, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[31264, 701, 46, 0, 69, "Section"],
Cell[31313, 703, 2549, 49, 475, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[33899, 757, 53, 0, 69, "Section"],
Cell[33955, 759, 1337, 26, 251, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[35329, 790, 29, 0, 69, "Section"],

Cell[CellGroupData[{
Cell[35383, 794, 31, 0, 38, "Subsection"],
Cell[35417, 796, 36, 0, 30, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[35490, 801, 39, 0, 38, "Subsection"],
Cell[35532, 803, 251, 5, 46, "Text"],
Cell[35786, 810, 46, 0, 30, "Text"],
Cell[35835, 812, 72, 0, 30, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[35944, 817, 37, 0, 38, "Subsection"],
Cell[35984, 819, 58, 0, 30, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

