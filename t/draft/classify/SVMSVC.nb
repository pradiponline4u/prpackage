(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    425409,       9670]
NotebookOptionsPosition[    380414,       8579]
NotebookOutlinePosition[    405106,       9145]
CellTagsIndexPosition[    404749,       9134]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["Mathematica", "\[RegisteredTrademark]"], TraditionalForm]]],
 "Journal"
}], "OnlineHeader"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox[" Support Vector Classifier  via ",
  FontFamily->"Times New Roman"],
 StyleBox["Mathematica",
  FontFamily->"Times New Roman",
  FontSlant->"Italic"]
}], "Title",
 TextAlignment->Center],

Cell["\<\

 B. Pal\[AAcute]ncz
 
 Department of Photogrammetry and Geoinformatics
 Budapest University of Technology  and Economics, 
 H-1111 Budapest, Hungary, M\[UDoubleDot]egyetem rkp. 3.
 
 e-mail:  palancz@epito.bme.hu\
\>", "Author",
 TextAlignment->Center],

Cell[CellGroupData[{

Cell["Abstract", "Section"],

Cell[TextData[{
 "In this case study, a  Support Vector Classifier function has been \
developed in ",
 StyleBox["Mathematica.",
  FontSlant->"Italic"],
 " Starting with a brief summary of support vector classification method, the \
step by step implementation of the classification algorithm in  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "  is presented and explained. To check our function, two test problems, \
learning a chess board and classification of two intertwined spirals are \
solved. In addition an application to image recognition is demonstrated using \
wavelet transformation as feature extraction method."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "1. Introductio",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["n",
     FontSlant->"Plain"], "1"], TraditionalForm]]]
}], "Section"],

Cell["\<\
Kernel Methods are relatively new family of algorithms that presents a series \
of useful features for pattern analysis in datasets. KMs combine the \
simplicity and computational efficiency of linear algorithms, such as the \
perception algorithm or ridge regression, with flexibility of nonlinear \
systems, such as for example neural networks, and rigor of statistical \
approaches such as regularization methods in multivariate statistics. As a \
result of the special way they represent functions, these algorithms \
typically reduce the learning step to convex optimization problem, that can \
always be solved in polynomial time, avoiding the problem of local minima \
typical of neural networks, decision trees and other nonlinear approaches.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2. Support Vector Classificatio",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["n",
     FontSlant->"Plain",
     FontTracking->"Plain",
     FontVariations->{"CompatibilityType"->0,
     "Masked"->False,
     "Outline"->False,
     "RotationAngle"->0,
     "Shadow"->False,
     "StrikeThrough"->False,
     "Underline"->False}], 
    RowBox[{"2", ",", "3"}]], TraditionalForm]]],
 " "
}], "Section"],

Cell[CellGroupData[{

Cell["2.1 Binary classification", "Subsection"],

Cell[TextData[{
 "\tIn case of binary classification, we try to estimate a real-valued \
function  ",
 StyleBox["f",
  FontSlant->"Italic"],
 " : ",
 StyleBox["X",
  FontSlant->"Italic"],
 "\[SubsetEqual] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "n"], TraditionalForm]]],
 "\[Rule]",
 StyleBox["R ",
  FontSlant->"Italic"],
 StyleBox["using training data , that is ",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox["n",
  FontSlant->"Italic",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox[" - dimensional patters ",
  FontVariations->{"CompatibilityType"->0}],
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " and class labels ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"], ",", 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "1"]}], ")"}], ",", "...", ",", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "m"], ",", 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "m"]}], ")"}]}], ")"}], "\[Element]", " ", 
  RowBox[{
   SuperscriptBox[
    StyleBox["R",
     FontSlant->"Italic"], "n"], " ", "\[Times]", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "such that ",
 StyleBox["f ",
  FontSlant->"Italic"],
 "will correctly classify new examples (",
 StyleBox["x, y",
  FontSlant->"Italic"],
 ")-that is, ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") = ",
 StyleBox["y",
  FontSlant->"Italic"],
 " for examples (",
 StyleBox["x, y",
  FontSlant->"Italic"],
 "), which were generated from the same underlying probability distribution ",
 StyleBox["P",
  FontSlant->"Italic"],
 "(",
 StyleBox["x,y",
  FontSlant->"Italic"],
 ") as the training data. If we put no restriction on the class of functions \
that we choose our estimate ",
 StyleBox["f",
  FontSlant->"Italic"],
 " from, however, even a function that does well on the training data -for \
example by satisfying ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 ") = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 " for ",
 StyleBox["i",
  FontSlant->"Italic"],
 " = 1...",
 StyleBox["m",
  FontSlant->"Italic"],
 "- need not generalize well to unseen examples. Suppose we know nothing \
additional about ",
 StyleBox["f",
  FontSlant->"Italic"],
 " (for example about its smoothness), then the values on the training \
patterns carry no information whatsoever about values on novel patterns. \
Hence learning is impossible, and minimizing the training error does not \
imply a small expected test error.\n\tStatistical learning theory, or VC \
(Vapnik-Chervonenkis) theory, shows that is crucial to restrict the class of \
functions that the learning machine can implement to one with capacity that \
is suitable for the amount of available training data.\n\t"
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2 Optimal hyperplane classifier", "Subsection"],

Cell["\<\
To design learning algorithms, we thus must come up with a class of  \
functions whose capacity can be computed. SV classifiers are based on the \
class of hyperplanes\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     StyleBox[
      RowBox[{"w", ",", "x"}],
      FontSlant->"Italic"], "\[RightAngleBracket]"}], " ", "+", 
    StyleBox[" ",
     FontSlant->"Italic"], 
    StyleBox["b",
     FontSlant->"Italic"]}], " ", "=", " ", 
   RowBox[{
    RowBox[{"0", "   ", 
     StyleBox["w",
      FontSlant->"Italic"]}], "\[Element]", 
    SuperscriptBox[
     StyleBox["R",
      FontSlant->"Italic"], "n"]}]}], ",", " ", 
  RowBox[{
   StyleBox["b",
    FontSlant->"Italic"], 
   StyleBox["\[Element]",
    FontSlant->"Plain"], 
   StyleBox["R",
    FontSlant->"Italic"]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["corresponding to decision functions", "Text"],

Cell[TextData[{
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") = sign(\[LeftAngleBracket]",
 StyleBox["w,x",
  FontSlant->"Italic"],
 "\[RightAngleBracket] + ",
 StyleBox["b ",
  FontSlant->"Italic"],
 ")"
}], "Text",
 TextAlignment->Center],

Cell["\<\
We can show that the optimal hyperplane, defined as the one with the maximal \
margin of separation between the two classes (see Figure 1), has the lowest \
capacity, which ensuring that the classifier learned from training samples \
will misclassify the less elements of the test samples originated from the \
same probability distribution.\
\>", "Text"],

Cell[GraphicsData["CompressedBitmap", "\<\
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
U/y7VPV7UP3Hqt4E1X8HZvaFeE+G/Q/1myN/\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{445, 317},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}],

Cell[TextData[{
 "Figure.1  A separable classification problem. The optimal hyperplane is \
orthogonal to the shortest line connecting the convex hulls of the two \
classes, and intersects it half way. There is a weight vector",
 StyleBox[" w",
  FontSlant->"Italic"],
 " and a threshold ",
 StyleBox["b",
  FontSlant->"Italic"],
 " such that ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 "(\[LeftAngleBracket] ",
 StyleBox["w",
  FontSlant->"Italic"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 "\[RightAngleBracket] + ",
 StyleBox["b",
  FontSlant->"Italic"],
 " > 0. Rescaling ",
 StyleBox["w",
  FontSlant->"Italic"],
 " and ",
 StyleBox["b",
  FontSlant->"Italic"],
 " such that the point(s) closest to the hyperplane satisfy \
\[VerticalSeparator] \[LeftAngleBracket] ",
 StyleBox["w",
  FontSlant->"Italic"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 "\[RightAngleBracket] + ",
 StyleBox["b",
  FontSlant->"Italic"],
 " \[VerticalSeparator] =1, we obtain a form (",
 StyleBox["w, b",
  FontSlant->"Italic"],
 ") of the hyperplane with  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 "(\[LeftAngleBracket] ",
 StyleBox["w",
  FontSlant->"Italic"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 "\[RightAngleBracket] + ",
 StyleBox["b",
  FontSlant->"Italic"],
 " \[GreaterEqual] 1. Note that the margin, measured perpendicularly to the \
hyperplane, equals ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"\[DoubleVerticalBar]", " ", "w", "\[DoubleVerticalBar]"}]], 
   TraditionalForm]]],
 ". To maximize the margin, we thus have to minimize \[DoubleVerticalBar] ",
 StyleBox["w",
  FontSlant->"Italic"],
 "\[DoubleVerticalBar] subject to ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]]],
 "(\[LeftAngleBracket] ",
 StyleBox["w",
  FontSlant->"Italic"],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 "\[RightAngleBracket] + ",
 StyleBox["b",
  FontSlant->"Italic"],
 " \[GreaterEqual] 1."
}], "Caption"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3 Maximal margin  classifier", "Subsection"],

Cell[TextData[{
 "The optimization problem to find the optimal ",
 StyleBox["w",
  FontSlant->"Italic"],
 " vector and the threshold ",
 StyleBox["b",
  FontSlant->"Italic"],
 " is the following,"
}], "Text"],

Cell["given a set of  linearly separable training samples", "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox["S",
   FontSlant->"Italic"], " ", "=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"], ",", 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "1"]}], ")"}], ",", 
    RowBox[{"...", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontSlant->"Italic"], "m"], ",", 
       SubscriptBox[
        StyleBox["y",
         FontSlant->"Italic"], "m"]}], ")"}]}]}], ")"}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "\nthe hyperplane (",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["w", "*"], TraditionalForm]]],
 StyleBox[",",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["b", "*"], TraditionalForm]]],
 ") that maximizes the geometric margin\n"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["minimize", 
    RowBox[{"w", ",", "b"}]], " ", 
   RowBox[{"\[LeftAngleBracket]", 
    StyleBox[
     RowBox[{"w", ",", "w"}],
     FontSlant->"Italic"], "\[RightAngleBracket]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"subject", " ", "to", " ", 
     SubscriptBox[
      StyleBox["y",
       FontSlant->"Italic"], 
      RowBox[{"i", " "}]], 
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{
       StyleBox["w",
        FontSlant->"Italic"], 
       StyleBox[",",
        FontSlant->"Italic"], 
       SubscriptBox[
        StyleBox["x",
         FontSlant->"Italic"], "i"]}], "\[RightAngleBracket]"}]}], " ", "+", 
    StyleBox["b",
     FontSlant->"Italic"]}], " ", "\[GreaterEqual]", "1"}], ",", " ", 
  RowBox[{"i", " ", "=", " ", 
   RowBox[{
    RowBox[{"1.", ".."}], 
    StyleBox["m",
     FontSlant->"Italic"]}]}]}]}], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["Then the geometric margin can be computed considering that", "Text"],

Cell[BoxData[
 RowBox[{"  ", 
  RowBox[{
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      StyleBox[
       SuperscriptBox["w", "*"],
       FontSlant->"Italic"], 
      StyleBox[",",
       FontSlant->"Italic"], 
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"]}], "\[RightAngleBracket]"}], " ", "+", 
    StyleBox[
     SuperscriptBox["b", "*"],
     FontSlant->"Italic"]}], " ", "=", " ", "1"}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{"  ", 
  RowBox[{
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      StyleBox[
       SuperscriptBox["w", "*"],
       FontSlant->"Italic"], 
      StyleBox[",",
       FontSlant->"Italic"], 
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "2"]}], "\[RightAngleBracket]"}], " ", "+", 
    StyleBox[
     SuperscriptBox["b", "*"],
     FontSlant->"Italic"]}], " ", "=", " ", 
   RowBox[{"-", " ", "1"}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["then", "Text"],

Cell[TextData[{
 "\[LeftAngleBracket]",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["w", "*"], TraditionalForm]]],
 ", (",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x",
    FontSlant->"Italic"], "1"]],
  TextAlignment->Center,
  FontFamily->"Times New Roman"],
 "-",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x",
    FontSlant->"Italic"], "2"]],
  TextAlignment->Center,
  FontFamily->"Times New Roman"],
 ")\[RightAngleBracket] = 2"
}], "Text",
 TextAlignment->Center],

Cell["rescaling", "Text"],

Cell[TextData[{
 "\[LeftAngleBracket]",
 Cell[BoxData[
  FormBox[
   FractionBox[
    SuperscriptBox["w", "*"], 
    RowBox[{"\[DoubleVerticalBar]", " ", 
     SuperscriptBox["w", "*"], "\[DoubleVerticalBar]"}]], TraditionalForm]]],
 ", (",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x",
    FontSlant->"Italic"], "1"]],
  TextAlignment->Center,
  FontFamily->"Times New Roman"],
 "-",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["x",
    FontSlant->"Italic"], "2"]],
  TextAlignment->Center,
  FontFamily->"Times New Roman"],
 ")\[RightAngleBracket] = ",
 Cell[BoxData[
  FormBox[
   FractionBox["2", 
    RowBox[{"\[DoubleVerticalBar]", " ", 
     SuperscriptBox["w", "*"], "\[DoubleVerticalBar]"}]], TraditionalForm]]]
}], "Text",
 TextAlignment->Center],

Cell["therefore the margin is", "Text"],

Cell[BoxData[
 RowBox[{"\[Gamma]", " ", "=", " ", 
  FractionBox["1", 
   RowBox[{"\[DoubleVerticalBar]", 
    StyleBox[" ",
     FontSlant->"Italic"], 
    StyleBox[
     SuperscriptBox["w", "*"],
     FontSlant->"Italic"], "\[DoubleVerticalBar]"}]]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "The traing patterns lie closest to the hyperplane  (see Figure 1. two red \
balls and one blue diamond) are called support vectors, carrying all relevant \
information about the classification problem. The number of support vectors, ",
 StyleBox["sv",
  FontSlant->"Italic"],
 " are equal or less than the number of the training patterns, ",
 StyleBox["m",
  FontSlant->"Italic"],
 ".\nThis minimization problem can be transformed into a dual maximization \
problem leading to a quadratic programming task, whose solution ",
 StyleBox["w",
  FontSlant->"Italic"],
 " has an expansion"
}], "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox["w",
   FontSlant->"Italic"], "=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"i", "=", "1"}], "sv"], 
   RowBox[{
    SubscriptBox["\[Nu]", "i"], 
    SubscriptBox[
     StyleBox["x",
      FontSlant->"Italic"], "i"]}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["Consequently, the final decision function is", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["f",
    FontSlant->"Italic"], 
   RowBox[{"(", 
    StyleBox["x",
     FontSlant->"Italic"], ")"}]}], " ", "=", " ", 
  RowBox[{"sign", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "sv"], 
      RowBox[{
       SubscriptBox["\[Nu]", "i"], 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{
         StyleBox["x",
          FontSlant->"Italic"], 
         StyleBox[",",
          FontSlant->"Italic"], 
         SubscriptBox[
          StyleBox["x",
           FontSlant->"Italic"], "i"]}], "\[RightAngleBracket]"}]}]}], "+", 
     StyleBox["b",
      FontSlant->"Italic"]}], ")"}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["\<\
which depends only on dot products between pattern. This lets us generalize \
to the nonlinear case.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.4 Feature spaces and kernels", "Subsection"],

Cell[TextData[{
 "The Figure 2 shows the basic idea of SV machines, which is to map the data \
into some other dot space, called the feature space ",
 StyleBox["F",
  FontSlant->"Italic"],
 " via nonlinear map,"
}], "Text"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    StyleBox["\[CapitalPhi]",
     FontSize->14], 
    StyleBox[" ",
     FontSize->14], 
    StyleBox[":",
     FontSize->14], 
    SuperscriptBox["R", "n"]}], " ", "\[Rule]", " ", "F"}],
  FontSlant->"Italic"]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "and perform the above linear algorithm in ",
 StyleBox["F",
  FontSlant->"Italic"],
 ". This is only requires the evaluation of dot products,\n"
}], "Text"],

Cell[TextData[{
 StyleBox["K",
  FontSlant->"Italic"],
 " (",
 StyleBox["u,v",
  FontSlant->"Italic"],
 ") = \[LeftAngleBracket]",
 StyleBox["\[CapitalPhi]",
  FontSize->14,
  FontSlant->"Italic"],
 "(",
 StyleBox["u",
  FontSlant->"Italic"],
 "), ",
 StyleBox["\[CapitalPhi]",
  FontSize->14,
  FontSlant->"Italic"],
 "(",
 StyleBox["v",
  FontSlant->"Italic"],
 ")\[RightAngleBracket]\n"
}], "Text",
 TextAlignment->Center],

Cell[GraphicsData["CompressedBitmap", "\<\
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
af8C+mJQGQ==\
\>"], "Graphics",
 Evaluatable->False,
 AspectRatioFixed->False,
 ImageSize->{400, 229},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}],

Cell[TextData[{
 "Figure 2. The idea of SV machines: map the training data nonlinearly into a \
higher dimensional feature space via ",
 StyleBox["\[CapitalPhi], ",
  FontSize->12],
 "and construct a separating hyperplane with maximum margin there. This \
yields a nonlinear decision boundary in input space. By the use of kernel \
function, it is possible to compute the separating hyperplane without \
explicitly carrying out the map into the feature space."
}], "Caption"],

Cell[TextData[{
 "\nClearly, if ",
 StyleBox["F",
  FontSlant->"Italic"],
 " is high dimensional, the dot product on the righthand side will be very \
expensive to compute. In some cases, however there is a simple kernel that \
can be evaluated efficiently. For instance, the polynomial kernel "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["K",
    FontSlant->"Italic"], 
   RowBox[{"(", 
    StyleBox[
     RowBox[{"u", ",", "v"}],
     FontSlant->"Italic"], ")"}]}], "=", 
  SuperscriptBox[
   RowBox[{"\[LeftAngleBracket]", " ", 
    StyleBox[
     RowBox[{"u", ",", "v"}],
     FontSlant->"Italic"], "\[RightAngleBracket]"}], "d"]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "can be shown to correspond to a map",
 StyleBox[" ",
  FontSlant->"Italic"],
 StyleBox["\[CapitalPhi]",
  FontSize->14,
  FontSlant->"Italic"],
 StyleBox["  ",
  FontSlant->"Italic"],
 "into the space spanned by all products of exactly ",
 StyleBox["d",
  FontSlant->"Italic"],
 " dimensions of  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "n"], TraditionalForm]]],
 ". For ",
 StyleBox["d",
  FontSlant->"Italic"],
 " = 2 and ",
 StyleBox["u, v",
  FontSlant->"Italic"],
 " \[Element]",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]]],
 ", for example, we have"
}], "Text"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"\[LeftAngleBracket]", 
    RowBox[{
     StyleBox["u",
      FontSlant->"Italic"], ",", " ", 
     StyleBox["v",
      FontSlant->"Italic"]}], "\[RightAngleBracket]"}], "2"], "=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{
       RowBox[{"(", GridBox[{
          {
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "1"]},
          {
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "2"]}
         }], ")"}], ",", 
       RowBox[{"(", GridBox[{
          {
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "1"]},
          {
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "2"]}
         }], ")"}]}], "\[RightAngleBracket]"}], ")"}], "2"], "=", 
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          SuperscriptBox[
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "1"], "2"]},
         {
          RowBox[{
           SqrtBox["2"], 
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "1"], 
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "2"]}]},
         {
          SuperscriptBox[
           SubscriptBox[
            StyleBox["u",
             FontSlant->"Italic"], "2"], "2"]}
        }], ")"}], ",", 
      RowBox[{"(", GridBox[{
         {
          SuperscriptBox[
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "1"], "2"]},
         {
          RowBox[{
           SqrtBox["2"], 
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "1"], 
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "2"]}]},
         {
          SuperscriptBox[
           SubscriptBox[
            StyleBox["v",
             FontSlant->"Italic"], "2"], "2"]}
        }], ")"}]}], "\[RightAngleBracket]"}], "=", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{
       StyleBox["\[CapitalPhi]",
        FontSize->14,
        FontSlant->"Italic"], 
       RowBox[{"(", 
        StyleBox["u",
         FontSlant->"Italic"], ")"}]}], ",", 
      RowBox[{
       StyleBox["\[CapitalPhi]",
        FontSize->14,
        FontSlant->"Italic"], 
       RowBox[{"(", 
        StyleBox["v",
         FontSlant->"Italic"], ")"}]}]}], 
     "\[RightAngleBracket]"}]}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defining", " ", 
   StyleBox["\[CapitalPhi]",
    FontSize->14,
    FontSlant->"Italic"], 
   RowBox[{"(", 
    StyleBox["x",
     FontSlant->"Italic"], ")"}]}], " ", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"], "2"], ",", 
     RowBox[{
      SqrtBox["2"], 
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"], 
      StyleBox[" ",
       FontSlant->"Italic"], 
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "2"]}], ",", 
     SuperscriptBox[
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "2"], "2"]}], ")"}], ".", "   "}]}]], "Text",
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{
  RowBox[{"More", " ", "generally"}], ",", " ", 
  RowBox[{
  "we", " ", "can", " ", "prove", " ", "that", " ", "for", " ", "every", " ", 
   "kernel", " ", "that", " ", "gives", " ", "rise", " ", "to", " ", "a", " ",
    "positive", " ", "matrix", " ", 
   RowBox[{"(", 
    RowBox[{"kernel", " ", "matrix"}], ")"}]}]}]], "Text",
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox[
    StyleBox["M",
     FontSlant->"Italic"], 
    RowBox[{"i", ",", "j", " "}]], "=", 
   StyleBox[" ",
    FontSlant->"Italic"], 
   RowBox[{
    StyleBox["K",
     FontSlant->"Italic"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "i"], ",", 
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "j"]}], ")"}]}]}], " ", ",", "  ", 
  RowBox[{
   RowBox[{
   "we", " ", "can", " ", "construct", " ", "a", " ", "map", " ", "such", " ",
     "that", "  ", 
    StyleBox["K",
     FontSlant->"Italic"], 
    RowBox[{"(", 
     StyleBox[
      RowBox[{"u", ",", "v"}],
      FontSlant->"Italic"], ")"}]}], "=", 
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      RowBox[{
       StyleBox["\[CapitalPhi]",
        FontSize->14,
        FontSlant->"Italic"], 
       RowBox[{"(", 
        StyleBox["u",
         FontSlant->"Italic"], ")"}]}], ",", 
      RowBox[{
       StyleBox["\[CapitalPhi]",
        FontSize->14,
        FontSlant->"Italic"], 
       RowBox[{"(", 
        StyleBox["v",
         FontSlant->"Italic"], ")"}]}]}], "\[RightAngleBracket]"}], "  ", 
    RowBox[{"holds", ".", " "}]}]}]}]], "Text",
 FontFamily->"Times New Roman"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.5 Optimization as a dual quadratic programming problem", "Subsection"],

Cell["Now the dual maximization  problem is the following,", "Text"],

Cell["consider classifying a set of training samples,", "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox["S",
   FontSlant->"Italic"], 
  StyleBox[" ",
   FontSlant->"Italic"], "=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["x",
        FontSlant->"Italic"], "1"], ",", 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "1"]}], ")"}], ",", 
    RowBox[{"...", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox[
        StyleBox["x",
         FontSlant->"Italic"], "m"], ",", 
       SubscriptBox[
        StyleBox["y",
         FontSlant->"Italic"], "m"]}], ")"}]}]}], ")"}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "using the feature space implicitly defined by the kernel ",
 StyleBox["K",
  FontSlant->"Italic"],
 "(",
 StyleBox["x, z",
  FontSlant->"Italic"],
 ") and suppose the parameters ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Alpha]", "*"], TraditionalForm]]],
 " solve the following quadratic optimization problem,"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maximize", "     ", 
   StyleBox["W",
    FontSlant->"Italic"], 
   RowBox[{"(", "\[Alpha]", ")"}]}], " ", "=", " ", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", " ", "=", "1"}], 
     StyleBox["m",
      FontSlant->"Italic"]], 
    SubscriptBox["\[Alpha]", "i"]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", ",", 
       RowBox[{"j", "=", "1"}]}], 
      StyleBox["m",
       FontSlant->"Italic"]], 
     RowBox[{
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "i"], 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "j"], 
      SubscriptBox["\[Alpha]", "i"], 
      SubscriptBox["\[Alpha]", "j"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         StyleBox["K",
          FontSlant->"Italic"], 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox[
            StyleBox["x",
             FontSlant->"Italic"], "i"], ",", 
           SubscriptBox[
            StyleBox["x",
             FontSlant->"Italic"], "j"]}], ")"}]}], "+", 
        RowBox[{
         FractionBox["1", 
          StyleBox["c",
           FontSlant->"Italic"]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"i", ",", "j"}]]}]}], ")"}]}]}]}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"subject", " ", "to", "     ", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", " ", "=", "1"}], 
      StyleBox["m",
       FontSlant->"Italic"]], 
     RowBox[{
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "i"], 
      SubscriptBox["\[Alpha]", "i"]}]}]}], "=", "0"}], ",", " ", 
  RowBox[{
   SubscriptBox["\[Alpha]", "i"], " ", "\[GreaterEqual]", "0"}], ",", " ", 
  RowBox[{"i", " ", "=", 
   RowBox[{
    RowBox[{"1", " ", ".."}], 
    StyleBox["m",
     FontSlant->"Italic"]}]}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Let", " ", 
      StyleBox["f",
       FontSlant->"Italic"], 
      RowBox[{"(", 
       StyleBox["x",
        FontSlant->"Italic"], ")"}]}], " ", "=", 
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", " ", "=", "1"}], "m"], 
       RowBox[{
        SubscriptBox[
         StyleBox["y",
          FontSlant->"Italic"], "i"], " ", 
        SuperscriptBox[
         SubscriptBox["\[Alpha]", "i"], "*"], " ", 
        StyleBox["K",
         FontSlant->"Italic"], 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox[
           StyleBox["x",
            FontSlant->"Italic"], "i"], ",", 
          StyleBox["x",
           FontSlant->"Italic"]}], ")"}]}]}], "+", 
      SuperscriptBox[
       StyleBox["b",
        FontSlant->"Italic"], "*"]}]}], ",", " ", 
    RowBox[{
     RowBox[{"where", " ", 
      SuperscriptBox[
       StyleBox["b",
        FontSlant->"Italic"], "*"], " ", "is", " ", "chosen", " ", "so", " ", 
      "that", " ", 
      SubscriptBox[
       StyleBox["y",
        FontSlant->"Italic"], "i"], " ", 
      StyleBox["f",
       FontSlant->"Italic"], 
      RowBox[{"(", 
       SubscriptBox[
        StyleBox["x",
         FontSlant->"Italic"], "i"], ")"}]}], " ", "=", " ", 
     RowBox[{"1", " ", "-", 
      RowBox[{
       FractionBox[
        SuperscriptBox[
         SubscriptBox["\[Alpha]", "i"], "*"], 
        StyleBox["c",
         FontSlant->"Italic"]], " ", "for", " ", "any", " ", 
       StyleBox["i",
        FontSlant->"Italic"], " ", "with"}]}]}]}], " ", "\[IndentingNewLine]", 
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Alpha]", "i"], "*"], "\[NotEqual]", " ", "0."}]}], 
  " "}]], "Text",
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "Then the decision rule given by sign(",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ")) is equivalent to the hyperplane in the feature space implicitly defined \
by the kernel ",
 StyleBox["K",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["z",
  FontSlant->"Italic"],
 "), which solves the optimization problem, where the geometric margin is"
}], "Text"],

Cell[BoxData[
 RowBox[{"\[Gamma]", "=", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{"i", "\[Element]", " ", 
        StyleBox["sv",
         FontSlant->"Italic"]}]], 
      SuperscriptBox[
       SubscriptBox["\[Alpha]", "i"], "*"]}], "-", 
     RowBox[{
      FractionBox["1", 
       StyleBox["c",
        FontSlant->"Italic"]], 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{
        SuperscriptBox["\[Alpha]", "*"], ",", 
        SuperscriptBox["\[Alpha]", "*"]}], "\[RightAngleBracket]"}]}]}], 
    ")"}], 
   RowBox[{"-", 
    FractionBox["1", "2"]}]]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[TextData[{
 "where set ",
 StyleBox["sv",
  FontSlant->"Italic"],
 " corresponds to indexes ",
 StyleBox["i",
  FontSlant->"Italic"],
 ", for which ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Alpha]", "i"], "*"], "\[NotEqual]", " ", "0"}], ",", 
   " "}]],
  FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox["sv",
   FontSlant->"Italic"], " ", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     StyleBox["i",
      FontSlant->"Italic"], ":", " ", 
     RowBox[{
      SuperscriptBox[
       SubscriptBox["\[Alpha]", "i"], "*"], "\[NotEqual]", " ", "0"}]}], ";", 
    StyleBox[" ",
     FontSlant->"Italic"], 
    RowBox[{
     StyleBox["i",
      FontSlant->"Italic"], "=", 
     RowBox[{
      RowBox[{"1.", ".."}], 
      StyleBox["m",
       FontSlant->"Italic"]}]}]}], "}"}]}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Training", " ", "samples"}], ",", " ", 
  SubscriptBox[
   StyleBox["x",
    FontSlant->"Italic"], "i"], ",", " ", 
  RowBox[{
   RowBox[{"for", " ", "which", 
    StyleBox[" ",
     FontSlant->"Italic"], 
    StyleBox["i",
     FontSlant->"Italic"]}], "\[Element]", 
   RowBox[{
    StyleBox["sv",
     FontSlant->"Italic"], " ", "are", " ", "called", " ", "support", " ", 
    "vectors", " ", "giving", " ", 
    "contribution"}]}]}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{"to", " ", "the", " ", "definition", "  ", "of", "  ", 
   StyleBox["f",
    FontSlant->"Italic"], 
   RowBox[{
    RowBox[{"(", 
     StyleBox["x",
      FontSlant->"Italic"], ")"}], "."}]}]}]}], "Text",
 FontFamily->"Times New Roman"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "3. Implementation of SVR in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Section"],

Cell[CellGroupData[{

Cell["\<\
3.1 Steps of implementation 
\
\>", "Subsubsection",
 CellDingbat->None,
 FontSize->14],

Cell[TextData[{
 "The dual optimization problem can be solved conveniently using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". In this section, the steps of  the implementation of  SVC algorithm are \
shown by solving XOR problem. The truth table of XOR, using bipolar values \
for the output, is \n"
}], "Text"],

Cell[TextData[{
 StyleBox["             Table 1",
  FontSlant->"Italic"],
 ". Truth table of XOR problem"
}], "Caption",
 TextAlignment->Center],

Cell[BoxData[GridBox[{
   {"x1", "x2", "y"},
   {"0", "0", 
    RowBox[{"-", "1"}]},
   {"0", 
    RowBox[{" ", "1"}], 
    RowBox[{"   ", "1"}]},
   {
    RowBox[{"  ", "1"}], "0", 
    RowBox[{"   ", "1"}]},
   {
    RowBox[{"   ", "1"}], 
    RowBox[{"  ", "1"}], 
    RowBox[{"-", "1"}]}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> {}}]], "Text",
 TextAlignment->Center,
 FontFamily->"Times New Roman"],

Cell["The input and output data lists are", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xym", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[11]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"zm", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[12]:="],

Cell["\<\
Let us employ Gaussian kernel with \[Beta] gain  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Beta]", "=", "10."}], ";"}]], "Input",
 CellLabel->"In[13]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"K", "[", 
   RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
  RowBox[{"Exp", "[", 
   RowBox[{
    RowBox[{"-", "\[Beta]"}], " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"u", "-", "v"}], ")"}], ".", 
     RowBox[{"(", 
      RowBox[{"u", "-", "v"}], ")"}]}]}], "]"}]}]], "Input",
 CellLabel->"In[3]:="],

Cell[TextData[{
 "The number of the data pairs in the training set, ",
 StyleBox["m",
  FontSlant->"Italic"],
 "  is "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"Length", "[", "zm", "]"}]}]], "Input",
 CellLabel->"In[15]:="],

Cell[BoxData["4"], "Output",
 CellLabel->"Out[15]="]
}, Open  ]],

Cell[TextData[{
 "Create the objective function W (\[Alpha]) to be maximized, with \
regularization parameter,  ",
 StyleBox["c",
  FontSlant->"Italic"],
 " = 5 "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", "5."}], ";"}]], "Input",
 CellLabel->"In[16]:="],

Cell[TextData[{
 "First, we prepare an matrix ",
 StyleBox["M, ",
  FontSlant->"Italic"],
 StyleBox["which is an extended form of the kernel matrix,",
  FontVariations->{"CompatibilityType"->0}]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"N", "[", 
        RowBox[{"K", "[", 
         RowBox[{
          RowBox[{"xym", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"xym", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "m"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "m"}], "}"}]}], "]"}], "+", 
     RowBox[{
      FractionBox["1", "c"], 
      RowBox[{"IdentityMatrix", "[", "m", "]"}]}]}], ")"}]}], ";"}]], "Input",
 CellLabel->"In[17]:="],

Cell["then the objective function can be expressed as,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"W", "=", 
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "m"], 
     SubscriptBox["\[Alpha]", "i"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "m"], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "m"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"zm", "[", 
          RowBox[{"[", "i", "]"}], "]"}], " ", 
         RowBox[{"zm", "[", 
          RowBox[{"[", "j", "]"}], "]"}], " ", 
         SubscriptBox["\[Alpha]", "i"], 
         SubscriptBox["\[Alpha]", "j"], " ", 
         RowBox[{"M", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ")"}]}]}]}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[18]:="],

Cell["The constrains for the unknown variables are", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"Apply", "[", 
    RowBox[{"And", ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "m"}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "m"], 
          RowBox[{
           RowBox[{"zm", "[", 
            RowBox[{"[", "i", "]"}], "]"}], " ", 
           SubscriptBox["\[Alpha]", "i"]}]}], "\[Equal]", "0"}], "}"}]}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[19]:="],

Cell[TextData[{
 "However the maximization problem  is a convex quadratic problem, from \
practical reasons to maximize the objective function the built in function ",
 StyleBox["NMaximize",
  FontFamily->"Courier New"],
 " is applied. ",
 StyleBox["NMaximize",
  FontFamily->"Courier New"],
 " implements several algorithms for finding constrained global optima. The \
methods are flexible enough to cope with functions that are not \
differentiable or continuous, and are not easily trapped by local optima. \
Possible settings for the ",
 StyleBox["Method", "MR"],
 " option include ",
 StyleBox["\"NelderMead\"", "MR"],
 ", ",
 StyleBox["\"DifferentialEvolution\"", "MR"],
 ", ",
 StyleBox["\"SimulatedAnnealing\"", "MR"],
 " and ",
 StyleBox["\"RandomSearch\". \n", "MR"],
 "Here we use  ",
 StyleBox["DifferentialEvolution, which ", "MR"],
 "is a genetic algorithm that maintains a population of specimens, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "1"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["x", "n"]}], TraditionalForm]], "InlineFormula"],
 ", represented as vectors of real numbers (\[OpenCurlyDoubleQuote]genes\
\[CloseCurlyDoubleQuote]). Every iteration, each ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]], "InlineFormula"],
 " chooses random integers ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]], "InlineFormula"],
 ", and ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]], "InlineFormula"],
 " and constructs the mate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "i"], "=", 
    RowBox[{
     SubscriptBox["x", "i"], "+", 
     RowBox[{"\[Gamma]", "(", 
      RowBox[{
       SubscriptBox["x", "a"], "+", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["x", "b"], "-", 
         SubscriptBox["x", "c"]}], ")"}]}], ")"}]}]}], TraditionalForm]], 
  "InlineFormula"],
 ", where ",
 Cell[BoxData[
  FormBox["\[Gamma]", TraditionalForm]], "InlineFormula"],
 " is the value of ",
 StyleBox["ScalingFactor", "MR"],
 ". Then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]], "InlineFormula"],
 " is mated with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]], "InlineFormula"],
 " according to the value of ",
 StyleBox["CrossProbability", "MR"],
 ", giving us the child ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["z", "i"], TraditionalForm]], "InlineFormula"],
 ". At this point ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]], "InlineFormula"],
 " competes against ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["z", "i"], TraditionalForm]], "InlineFormula"],
 " for the position of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]], "InlineFormula"],
 " in the population. The default value of ",
 StyleBox["SearchPoints", "MR"],
 " is ",
 StyleBox["Automatic", "MR"],
 ", which is ",
 StyleBox["Min[10*d,", "MR"],
 " ",
 StyleBox["50]", "MR"],
 ", where ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]], "InlineFormula"],
 " is the number of variables. "
}], "Text"],

Cell["\<\
We need the list of unknown variables \[Alpha],\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vars", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["\[Alpha]", "i"], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "m"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[20]:="],

Cell["Then the solution of the maximization problem is,", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NMaximize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"W", ",", "g"}], "}"}], ",", "vars", ",", 
    RowBox[{"Method", "\[Rule]", "DifferentialEvolution"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[21]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.6667927842626271`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Alpha]", "1"], "\[Rule]", "0.8333963921313133`"}], ",", 
     RowBox[{
      SubscriptBox["\[Alpha]", "2"], "\[Rule]", "0.8333963921313136`"}], ",", 
     RowBox[{
      SubscriptBox["\[Alpha]", "3"], "\[Rule]", "0.8333963921313133`"}], ",", 
     RowBox[{
      SubscriptBox["\[Alpha]", "4"], "\[Rule]", "0.8333963921313136`"}]}], 
    "}"}]}], "}"}]], "Output",
 CellLabel->"Out[21]="]
}, Open  ]],

Cell[TextData[{
 "The consistency of this solution can be checked by computing values of  ",
 StyleBox["b ",
  FontSlant->"Italic"],
 " for every data points. Theoretically, these values should be same for any \
data points, however, in general, this is only approximately true. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bdata", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"1", "-", 
         FractionBox[
          SubscriptBox["\[Alpha]", "j"], "c"]}], 
        RowBox[{"zm", "[", 
         RowBox[{"[", "j", "]"}], "]"}]], "-", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"i", "=", "1"}], "m"], 
        RowBox[{
         RowBox[{"zm", "[", 
          RowBox[{"[", "i", "]"}], "]"}], " ", 
         SubscriptBox["\[Alpha]", "i"], " ", 
         RowBox[{"K", "[", 
          RowBox[{
           RowBox[{"xym", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"xym", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}]}], ")"}], "/.", 
     RowBox[{"sol", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "m"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[22]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.8972949582888073`*^-16"}], ",", "6.652935580914177`*^-17", 
   ",", "3.452506293008528`*^-16", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[22]="]
}, Open  ]],

Cell[TextData[{
 "The value of ",
 StyleBox["b",
  FontSlant->"Italic"],
 " can be chosen as the average of these values"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", "bdata"}], "]"}], "/", "m"}]}]], "Input",
 CellLabel->"In[23]:="],

Cell[BoxData["5.551262232027846`*^-17"], "Output",
 CellLabel->"Out[23]="]
}, Open  ]],

Cell["Then the classifier function is,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "w_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", "=", "1"}], "m"], 
       RowBox[{
        RowBox[{"zm", "[", 
         RowBox[{"[", "i", "]"}], "]"}], " ", 
        SubscriptBox["\[Alpha]", "i"], " ", 
        RowBox[{"K", "[", 
         RowBox[{"w", ",", 
          RowBox[{"xym", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], ")"}], "+", "b"}], 
    ")"}], "/.", 
   RowBox[{"sol", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}]}]], "Input",
 CellLabel->"In[24]:="],

Cell["In symbolic form", "Text"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"x", ",", "y"}], "]"}]], "Input",
 CellLabel->"In[25]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{"x", ",", "y"}], "}"}], "]"}]], "Input",
 CellLabel->"In[26]:="],

Cell[BoxData[
 RowBox[{"5.551262232027846`*^-17", "-", 
  RowBox[{"0.8333963921313136`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "10.`"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "x"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "y"}], ")"}], "2"]}], ")"}]}]]}], "+", 
  RowBox[{"0.8333963921313136`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "10.`"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "y"}], ")"}], "2"]}], ")"}]}]]}], "+", 
  RowBox[{"0.8333963921313133`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "10.`"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "x"}], ")"}], "2"], "+", 
       SuperscriptBox["y", "2"]}], ")"}]}]]}], "-", 
  RowBox[{"0.8333963921313133`", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "10.`"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], ")"}]}]]}]}]], "Output",
 CellLabel->"Out[26]="]
}, Open  ]],

Cell["\<\
Let us display the contour lines of the continuous classification function,\
\>", "Text"],

Cell[BoxData[
 RowBox[{"<<", "ExtendGraphics`LabelContour`"}]], "Input",
 CellLabel->"In[27]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell["", "CompatibilityText",
 CellFrameMargins->0,
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell[TextData[{
 "The value of ",
 ButtonBox["PlotPoints",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotPoints"],
 " given in this evaluation may cause delay in displaying the graphic. \
Reducing the value of the ",
 ButtonBox["PlotPoints",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotPoints"],
 " option may help. "
}], "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell["", "CompatibilityText",
 CellFrameMargins->0,
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 ButtonBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "DiscardAdvisory"],
   ImageSizeCache->{228., {2., 12.}}],
  ButtonData->{
   "compatibilitytag-nosugg-plotpoints", 
    "Discard"}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell["\<\
p=ContourPlot[f[{x,y}], {x, 0, \
1},{y,0,1},Contours->{-0.5,-0.05,0,0.05,0.5},ContourShading\[Rule]False,\
PlotPoints\[Rule]50,DisplayFunction\[Rule]Identity];\
\>", "Input",
 CellTags->"S5.34.1",
 CellLabel->"In[28]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"LabelContourLines", "[", 
    RowBox[{"p", ",", 
     RowBox[{"LabelPlacement", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"LabelFont", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Courier\>\"", ",", "10"}], "}"}]}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[29]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[TextData[{
 "Graphics`MultipleListPlot` is now obsolete. The legacy version being loaded \
may conflict with current Mathematica functionality. See the Compatibility \
Guide for updating information.",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:Compatibility/tutorial/Graphics/MultipleListPlot/"], 
  "SR"]
}], "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"<<", "\<\"ErrorBarPlots`\"\>"}], ";", 
  RowBox[{"<<", "\<\"PlotLegends`\"\>"}]}]], "CompatibilityInput",
 CellTags->{"S5.37.1", "compatibility-no"},
 CellLabel->"In[1]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell["<<Graphics`MultipleListPlot`", "Input",
 CellTags->{"S5.37.1", "compatibility-yes"},
 CellLabel->"In[1]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[TextData[{
 "Graphics`MultipleListPlot` is now obsolete. The legacy version being loaded \
may conflict with current Mathematica functionality. See the Compatibility \
Guide for updating information.",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:Compatibility/tutorial/Graphics/MultipleListPlot/"], 
  "SR"]
}], "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"SymbolStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Hue", "[", "0.`", "]"}], ",", 
        RowBox[{"Hue", "[", "0.8`", "]"}]}], "}"}]}], ",", 
     RowBox[{"SymbolShape", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Box", ",", "3"}], "]"}], ",", 
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Star", ",", "7"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"Frame", "\[Rule]", "True"}], ",", 
     RowBox[{"Axes", "\[Rule]", "False"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[31]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2", "=", 
   RowBox[{"MultipleListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"SymbolStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Hue", "[", ".0", "]"}], ",", 
        RowBox[{"Hue", "[", "0.8", "]"}]}], "}"}]}], ",", 
     RowBox[{"SymbolShape", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Box", ",", "3"}], "]"}], ",", 
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Star", ",", "7"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"Frame", "\[Rule]", "True"}], ",", 
     RowBox[{"Axes", "\[Rule]", "False"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[31]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell["\<\
Show is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed.\
\>", "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p1", ",", "p2"}], "}"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[32]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-semicolon-Show", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-semicolon-Show", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p1", ",", "p2"}], "}"}], ",", 
    RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[32]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
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
cA/3HPknyk299HcDK+xbi17f/3smLGo=\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{196, 196},
 ImageMargins->{{77, 0}, {0, 3}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[32]:="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Figure 3",
  FontVariations->{"CompatibilityType"->0}],
 ". The contour lines of  the continuous classification function ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "1, ",
 StyleBox["x",
  FontSlant->"Italic"],
 "2) for XOR problem"
}], "Caption",
 TextAlignment->Center],

Cell["\<\
The discrete classifier, the decision rule using signum function is\
\>", "Text"],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell["\<\
Plot3D is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed.\
\>", "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sign", "[", 
    RowBox[{"f", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[33]:="],

Cell[BoxData[
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-semicolon-Plot3D", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-semicolon-Plot3D", 
     "Discard"}]}]], "CompatibilityControls", "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot3D", "[", 
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[33]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
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
Zcdl\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{207.875, 168.563},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[33]:="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Figure 4. ",
  FontVariations->{"CompatibilityType"->0}],
 "The decision rule,  sign(",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "1, ",
 StyleBox["x",
  FontSlant->"Italic"],
 "2)) for XOR problem"
}], "Caption",
 TextAlignment->Center],

Cell["Let us check the classifier", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sign", "[", 
     RowBox[{"f", "[", "#", "]"}], "]"}], "&"}], ",", "xym"}], "]"}]], "Input",
 CellLabel->"In[34]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellLabel->"Out[34]="]
}, Open  ]],

Cell["and", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zm", "\[Equal]", "%"}]], "Input",
 CellLabel->"In[35]:="],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[35]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "3.2 ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " module for SVR"
}], "Subsubsection",
 CellDingbat->None,
 FontSize->14],

Cell[TextData[{
 "These steps can be collected in a module, where the vector ",
 StyleBox["xm",
  FontSlant->"Italic"],
 " contains the input vectors (the training set), and the  vector ",
 StyleBox["ym ",
  FontSlant->"Italic"],
 StyleBox["contains the corresponding scalar output values ( the labels of \
the training set),",
  FontVariations->{"CompatibilityType"->0}]
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SupportVectorClassifier", "[", 
    RowBox[{"xm_", ",", "ym_", ",", "K_", ",", "c_"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "m", ",", "n", ",", "M", ",", "i", ",", "j", ",", "W", ",", "g", ",", 
       "vars", ",", "sol", ",", "bdata", ",", "b"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", "=", 
       RowBox[{"Length", "[", "ym", "]"}]}], ";", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"xm", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"M", "=", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"K", "[", 
           RowBox[{
            RowBox[{"xm", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"xm", "[", 
             RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "m"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "m"}], "}"}]}], "]"}], "+", 
        RowBox[{
         FractionBox["1", "c"], 
         RowBox[{"IdentityMatrix", "[", "m", "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"W", "=", 
       RowBox[{
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"i", "=", "1"}], "m"], 
         SubscriptBox["\[Alpha]", "i"]}], "-", 
        RowBox[{
         FractionBox["1", "2"], 
         RowBox[{
          UnderoverscriptBox["\[Sum]", 
           RowBox[{"i", "=", "1"}], "m"], 
          RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{"j", "=", "1"}], "m"], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ym", "[", 
              RowBox[{"[", "i", "]"}], "]"}], " ", 
             RowBox[{"ym", "[", 
              RowBox[{"[", "j", "]"}], "]"}], " ", 
             SubscriptBox["\[Alpha]", "i"], 
             SubscriptBox["\[Alpha]", "j"], " ", 
             RowBox[{"M", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ")"}]}]}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"g", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"And", ",", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              SubscriptBox["\[Alpha]", "i"], "\[GreaterEqual]", "0"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", "m"}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              UnderoverscriptBox["\[Sum]", 
               RowBox[{"i", "=", "1"}], "m"], 
              RowBox[{
               RowBox[{"ym", "[", 
                RowBox[{"[", "i", "]"}], "]"}], " ", 
               SubscriptBox["\[Alpha]", "i"]}]}], "\[Equal]", "0"}], "}"}]}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"vars", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         SubscriptBox["\[Alpha]", "i"], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "m"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sol", "=", 
       RowBox[{
        RowBox[{"NMaximize", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"W", ",", "g"}], "}"}], ",", "vars", ",", 
          RowBox[{"Method", "\[Rule]", "DifferentialEvolution"}]}], "]"}], 
        "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"bdata", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{"1", "-", 
              FractionBox[
               SubscriptBox["\[Alpha]", "j"], "c"]}], 
             RowBox[{"ym", "[", 
              RowBox[{"[", "j", "]"}], "]"}]], "-", 
            RowBox[{
             UnderoverscriptBox["\[Sum]", 
              RowBox[{"i", "=", "1"}], "m"], 
             RowBox[{
              RowBox[{"ym", "[", 
               RowBox[{"[", "i", "]"}], "]"}], " ", 
              SubscriptBox["\[Alpha]", "i"], " ", 
              RowBox[{"K", "[", 
               RowBox[{
                RowBox[{"xm", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"xm", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}]}]}], ")"}], "/.", 
          RowBox[{"sol", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", "m"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"b", "=", 
       RowBox[{
        RowBox[{"Apply", "[", 
         RowBox[{"Plus", ",", "bdata"}], "]"}], "/", "m"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             UnderoverscriptBox["\[Sum]", 
              RowBox[{"i", "=", "1"}], "m"], 
             RowBox[{
              RowBox[{"ym", "[", 
               RowBox[{"[", "i", "]"}], "]"}], " ", 
              SubscriptBox["\[Alpha]", "i"], " ", 
              RowBox[{"K", "[", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  SubscriptBox["x", "j"], ",", 
                  RowBox[{"{", 
                   RowBox[{"j", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
                RowBox[{"xm", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], ")"}], "+", 
           "b"}], ")"}], "/.", "sol"}], ",", 
        RowBox[{"vars", "/.", "sol"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:="],

Cell[TextData[{
 "The results of this module are the analytic form of the continuous \
classifier function and the values of  ",
 Cell[BoxData[
  SubscriptBox["\[Alpha]", "i"]]],
 "'s. Let us check the solution of the XOR problem"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SupportVectorClassifier", "[", 
  RowBox[{"xym", ",", "zm", ",", "K", ",", "c"}], "]"}]], "Input",
 CellLabel->"In[29]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"5.551115123125783`*^-17", "-", 
    RowBox[{"0.8333963921313136`", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "10.`"}], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SubscriptBox["x", "1"]}], ")"}], "2"], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SubscriptBox["x", "2"]}], ")"}], "2"]}], ")"}]}]]}], "+", 
    RowBox[{"0.8333963921313136`", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "10.`"}], " ", 
       RowBox[{"(", 
        RowBox[{
         SubsuperscriptBox["x", "1", "2"], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SubscriptBox["x", "2"]}], ")"}], "2"]}], ")"}]}]]}], "+", 
    RowBox[{"0.8333963921313133`", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "10.`"}], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SubscriptBox["x", "1"]}], ")"}], "2"], "+", 
         SubsuperscriptBox["x", "2", "2"]}], ")"}]}]]}], "-", 
    RowBox[{"0.8333963921313133`", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "10.`"}], " ", 
       RowBox[{"(", 
        RowBox[{
         SubsuperscriptBox["x", "1", "2"], "+", 
         SubsuperscriptBox["x", "2", "2"]}], ")"}]}]]}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.8333963921313133`", ",", "0.8333963921313136`", ",", 
     "0.8333963921313133`", ",", "0.8333963921313136`"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[29]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"%", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["x", "1"], ",", 
      SubscriptBox["x", "2"]}], "}"}], "]"}]}], "//", "Chop"}]], "Input",
 CellLabel->"In[30]:="],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[30]="]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Test problems", "Section"],

Cell[CellGroupData[{

Cell["4.1 Learning a chess board ", "Subsubsection",
 CellDingbat->None,
 FontSize->14],

Cell["\<\
Let us consider a 2 \[Times] 2 chess board. The training points are generated \
by uniformly distributed random numbers from the interval [-1,1] \[Times] \
[-1, 1]. 
The chess board matrix\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[37]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[TextData[{
 "As of Version 6, MeshRange has been superseded by DataRange. ",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MeshRange"], "SR"]
}], "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"ListDensityPlot", "[", 
    RowBox[{"M", ",", 
     RowBox[{"DataRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[38]:="],

Cell[BoxData[
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-meshrange", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-meshrange", "Discard"}]}]], "CompatibilityControls", \
"CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"ListDensityPlot", "[", 
    RowBox[{"M", ",", 
     RowBox[{"MeshRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[38]:="],

Cell["Creating the training set using 50 random samples,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xym", "=", 
   RowBox[{"{", "}"}]}], ";", 
  RowBox[{"zm", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input",
 CellLabel->"In[50]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[TextData[{
 "As of Version 6, Random has been superseded by RandomReal, RandomInteger \
and RandomComplex. ",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Random"], "SR"]
}], "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.99`"}], ",", "0.99`"}], "}"}], "]"}]}], ";", 
     RowBox[{"x2", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.99`"}], ",", "0.99`"}], "}"}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x1", " ", "x2"}], ">", "0"}], ",", 
       RowBox[{"z", "=", "1"}], ",", 
       RowBox[{"z", "=", 
        RowBox[{"-", "1"}]}]}], "]"}], ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"xym", ",", 
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}]}], "]"}], ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"zm", ",", "z"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "50"}], "}"}]}], "]"}], 
  ";"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[51]:="],

Cell[BoxData[
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-random", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-random", "Discard"}]}]], "CompatibilityControls", \
"CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "=", 
      RowBox[{"Random", "[", 
       RowBox[{"Real", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.99"}], ",", "0.99"}], "}"}]}], "]"}]}], ";", 
     RowBox[{"x2", "=", 
      RowBox[{"Random", "[", 
       RowBox[{"Real", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.99"}], ",", "0.99"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x1", " ", "x2"}], ">", "0"}], ",", 
       RowBox[{"z", "=", "1"}], ",", 
       RowBox[{"z", "=", 
        RowBox[{"-", "1"}]}]}], "]"}], ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"xym", ",", 
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}]}], "]"}], ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"zm", ",", "z"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "50"}], "}"}]}], "]"}], ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[51]:="],

Cell["Preparation data to display them", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "xym", "]"}], ",", 
      RowBox[{"{", "zm", "}"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[52]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Drop", "[", 
       RowBox[{"#", ",", 
        RowBox[{"-", "1"}]}], "]"}], "&"}], ",", 
     RowBox[{"Select", "[", 
      RowBox[{"data", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}], ">", "0"}], "&"}]}], "]"}]}], 
    "]"}]}], ";", 
  RowBox[{"data2", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Drop", "[", 
       RowBox[{"#", ",", 
        RowBox[{"-", "1"}]}], "]"}], "&"}], ",", 
     RowBox[{"Select", "[", 
      RowBox[{"data", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "<", "0"}], "&"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->"In[53]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[TextData[{
 "Graphics`MultipleListPlot` is now obsolete. The legacy version being loaded \
may conflict with current Mathematica functionality. See the Compatibility \
Guide for updating information.",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:Compatibility/tutorial/Graphics/MultipleListPlot/"], 
  "SR"]
}], "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"data1", ",", "data2"}], "}"}], ",", 
     RowBox[{"SymbolShape", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Triangle", ",", "5"}], "]"}], ",", 
        RowBox[{"PlotSymbol", "[", 
         RowBox[{"Box", ",", "2"}], "]"}]}], "}"}]}], ",", 
     RowBox[{"SymbolStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Hue", "[", "0.7`", "]"}], ",", 
        RowBox[{"Hue", "[", "0.`", "]"}]}], "}"}]}], ",", 
     RowBox[{"Frame", "\[Rule]", "True"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "CompatibilityInput",
 CellTags->{"S5.37.1", "compatibility-no"},
 CellLabel->"In[54]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-oldpackage-Graphics`MultipleListPlot`", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],

Cell["\<\
p2=MultipleListPlot[data1,data2,SymbolShape -> {PlotSymbol[Triangle,5], \
PlotSymbol[Box,2]},SymbolStyle\[Rule]{Hue[.7],Hue[.0]},Frame\[Rule]True,\
AspectRatio\[Rule]1,DisplayFunction\[Rule]Identity];\
\>", "Input",
 CellTags->{"S5.37.1", "compatibility-yes"},
 CellLabel->"In[54]:="],

Cell["\<\
Let us employ the same Gaussian kernel , but now with gain  \[Beta] = 15.  \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Beta]", "=", "15"}], ";"}]], "Input",
 CellLabel->"In[44]:="],

Cell[TextData[{
 "employing parameter ",
 StyleBox["c",
  FontSlant->"Italic"],
 " = 100,"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", "100"}], ";"}]], "Input",
 CellLabel->"In[45]:="],

Cell["The solution is", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "=", 
   RowBox[{"SupportVectorClassifier", "[", 
    RowBox[{"xym", ",", "zm", ",", "K", ",", "c"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[55]:="],

Cell["This run could take some minutes.", "Text"],

Cell[TextData[{
 "p3= ContourPlot[F[[1]],{",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 ",-1,1},{",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]]],
 ",-1,1},Contours->{0},PlotPoints\[Rule]100,ContourShading\[Rule]False,\
DisplayFunction\[Rule]Identity];"
}], "Input",
 CellTags->"S5.34.1",
 CellLabel->"In[56]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell["", "CompatibilityText",
 CellFrameMargins->0,
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell[TextData[{
 "The value of ",
 ButtonBox["PlotPoints",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotPoints"],
 " given in this evaluation may cause delay in displaying the graphic. \
Reducing the value of the ",
 ButtonBox["PlotPoints",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotPoints"],
 " option may help. "
}], "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell["", "CompatibilityText",
 CellFrameMargins->0,
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 ButtonBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "DiscardAdvisory"],
   ImageSizeCache->{228., {2., 12.}}],
  ButtonData->{
   "compatibilitytag-nosugg-plotpoints", 
    "Discard"}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p4", "=", 
   RowBox[{"DensityPlot", "[", 
    RowBox[{
     RowBox[{"Sign", "[", 
      RowBox[{"F", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "1"],
        TraditionalForm], ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "2"],
        TraditionalForm], ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", "100"}], ",", 
     RowBox[{"Mesh", "\[Rule]", "False"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[57]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[TextData[{
 "As of Version 6, GraphicsArray has been superseded by GraphicsRow and \
GraphicsGrid. ",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphicsArray"], "SR"],
 "\n",
 "Show is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed."
}], "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Show", "[", 
       RowBox[{"{", 
        RowBox[{"p2", ",", "p3"}], "}"}], "]"}], ",", "p1", ",", "p4"}], 
     "}"}], "]"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[58]:="],

Cell[BoxData[
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{"", "Discard"}]}]], "CompatibilityControls", \
"CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"GraphicsArray", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{"{", 
         RowBox[{"p2", ",", "p3"}], "}"}], "]"}], ",", "p1", ",", "p4"}], 
      "}"}], "]"}], ",", 
    RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[58]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
eJzlXNmO2zYUZSzb8jbObJktzdjZO0tmSYGij31qn/oFBYoMggLJQ9EgzQcU
aP+i/VdXvKLupahLitRia1Ah8RAkRZ5zuF9e+6e7Lx9+/e3uy8f3d8sfP999
+vDx/R/LH37/nERFD4R48I8Q4s+lkOFVElQfq+Tf6l/5IWM2E34l/wwknC0Z
6slQnwnNMPTQmW+O5X3tWfK0tZLDMc9SUaACEYm0lUAuldTPxSXPiI+e8NFb
QYU8ZGCc14Y27i601lQLb9cpk9VSoQUeV8JWPdm4IuMugmpHKdWKS/kHCukz
mYaY2nP0f5p5vFHSe9tMtc+aAhU2BtYEqkmlwsfimMlaQSajhJpTGFdk2NS6
JlDtKKVa8TU2NS2xUGGE3caaOse4C2e+SSOl+GKZp8R89k5P5B/YN8AAeidD
C4xLBFOawvNLPpXeUEouGJF7iOqASd2vGCefpxCKc/mytOwvV+de7TrXxbBM
ViPujB8OV4jvKZMha0IrMyPuZyxNoTuUf6wTdADOayarWbi7tS+TwOoaglEu
8agaxlsZw6VOwhoGtB2JbwTDejuFloQfM28u6rBeNsn1FNudkxCmkSkwHOQw
ZGE3TSo8YoaBleDCicmL1gs3GS0hrV1NvcBkB0NDppTnIUxeMgXA7uKtkVk+
Mzt0EHKsoOsV9DcEPVD60xRXgh9ejGxMXnQUP6zQsUS9hfjT6gZAxRy/QOEA
yUy6TGsoGahNRhKKFS09XwbgEHlwS93meMDIgZbI9oN6owy6wMh/rM9wrBx1
AXhgU9D4cKH/CtFzG/gNo+9ps5MMpatf8rlzDxnBhBOrPUrGSCUCqd17SCpG
9AMMpdv/wj5sbRT8BzihH+Jg2efR08LB7eNro6+8lRoh8BhDjxg0LeMH88NN
LfwjlaovGI/SWaB9/GAWuK6Af8ygXqwftX+fv2Ti6Oxw3AZMqPKqgriXKORO
uwjfyM83JQh3EQ13P8QdkABXjJttA6FbdXdtQae4vWDgYNG4LNEjXYR9b1xM
xKjPkLbw9JJ66DzFSRQGgGsCq2S7tbnVkTC1pPM7Aeg1IzwpDDj1dLSgHs1I
lsWZu12JUKHb0jd5rLcydGHIKx81P01TgMLjcoHrpQ+x+6h+koT6jhbqZzaG
VWptWKUVC9aOE4AtaDDO6nG+RknDuxVntue67jZ2LAhFpCvfzL1gcQMANjFs
fYnfyM/zEnFpYqabAauKfTytTLSdv5bNKtsAUw+ZwjkQQUrtebLwkoRbu3ew
6+yq1GyLhKc4rkTDSsNxr73aEyf/bZNJAjXUJuD8G/N1kQhsmDPsl/cOdaT6
jp6Q1XjRKbgg44jOk9RxqGKGYGfw9xA/zEO0yI5Mqz1kFmpahI5jHj83NmYj
hD7Mk4gd9yh76+IR2CJEJsYBvINxmyHjtRnhyPSRwhjHNZDR1oXCKt5VMgOk
oLZuWYej8RNx0618niKnUbuc/EfNAElkh4KCCZ/G1KaIeZ2urFZYgxP1PM4G
xW2rusruMY4rcnp91mWskXblJZQnRdMIvYw7HEK1VgjB9pqtdaH2H7rqyicD
DDPorq3spgGr7YFQ161VBJ8ifgqRI9YCO/KsDfwg3hZKVmavdLtrTGwCRdiE
5PsInKCqsSpPFAqQzxJfa9CJA5TeljE7PrTBdcPPAsadumENnzEgydKnzrLZ
PkD5Kgh1LB4hGQ6kBV3QyfjUnyFoso8teixDMepZUcXvkas6lIP1JQv10gs0
kflG8VzfOTJYm+oEUx8jpSnG6R5pAZ1gmH/Xek8+x8EhwAkI73t7aH0a4rpW
vdVhVnqzKiYEiAUt/C29VHeccJ4oU6dYNDsCR7rB7DMX5hPGxcfSx9tSbIiK
Le2KuSfUARPn7lEABNYj2qnSbSNQndisUG53Oasky3IKcEPNLT9lpyVutdK4
F3xOCX2MI4g06OG+3aoBt6Bamb+ywYY3zs0JxHrANeLoBuNESWiwFCg2nUmM
fZp1Tz+y2cCaYQ57Yu62teyQX0kDcr84wJbW/EzUf+slZR22EbZzIFuu140N
toX5hea5I6Zho/vGkuytlrtFcus4wU7bNDeAeOXFje99p2UsyPnpEEPGmmRq
V4MFfclj1hR2mF6OMdQK9vSNllqAfJ2OMdTQtF9Ye65qEDl3wIdhT3aDhubu
FuDnqyEb55qwk9+MR/8/yfec7EKyQAC2DE8URJeBrCkqkJ+zreSaodBTDnQW
EC/ThX5+VAduQX4POh9uj3pf+PiaokKxw2aG+/5QM9iNQn3tU2tnsY0Diyul
CYgXWHhx/BaAnbcOB26qboMVI7MWXNVENojhTm5WAvvOoji3IA96Pi5/ZeQN
nJwM9R3ZrLJYvLYCHNlAo7d2jaq4ATo00+/L5YPeItwFv9N/Lp/1BhWKHLq4
vNl6+R6jj88Kfnzcqjl3qkD3OiM857l8+twOaqE9xu2WVrGTmIUWMug/AJCd
Y2f5G/0jptaa/mWVtPE4yp8pGlVUKileProLSSYWGbuGaPwZ2GTz9SrzmITd
XmVlQvj42MnnJQ4YLQGtxlGedh8PP02fn8vocMfDHPQsMm/wBsBKgFahv0W5
LfY5A3DeizHnC8BtqLmuVgu4fMpmnCAKQmQXFQnu112By50lY0ZfzpzcGcBw
mpq1YmqtCpPMQwBu2orNMK0oeW58BhdBAteSSbuQSjf0+XfobvYoD3OMDk5d
hfkMJyb6uvs9AZwNF32kb7iXcoCfMzC5DctGFKZh1dABOV9AFUj0dfHGjQlV
wK3T2NEwPvNrxPKBLxmP9I1ITcwFk8EZwi670IT0R0645CYKRz+4FvF1bqoE
3LFSGj9UZTm20m95advWNHtGAPrN0EaFqjEKuLLxWRjAmPPbaxnj2IAvbC96
xFn6YYws6etSnHNKWvWQFXOV3TUwrH1/Lqp1/s+xxblUuneGM1uU9z1t4vew
oJe8RIL6qPOlxd1q0pFlD0Nza/v9n38E7TsZo34bAYMie+aV2/mdVjk53PyN
ob8w9CnNBO9u+KeQxYP/ACkVcVI=\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{411, 128.438},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[58]:="]
}, Open  ]],

Cell[TextData[{
 "Figure 5. SVC result from 60 random samples: the functions  f(x) with the \
random samples, the ideal chess board and sign(",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "))"
}], "Caption",
 TextAlignment->Center],

Cell["\<\
The SV solution of a larger chess board problem can be found in [3].\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.2 Two intertwined spirals  ", "Subsubsection",
 CellDingbat->None,
 FontSize->14],

Cell["\<\
The two intertwined spirals is a challenging classification benchmark \
originated from the field of neural networks [4].\
\>", "Text"],

Cell["Parametric equations of the spirals are", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x1", "[", "t_", "]"}], ":=", 
  RowBox[{"2", " ", 
   RowBox[{"Cos", "[", " ", "t", "]"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"t", "/", "10"}]]}]}]], "Input",
 CellLabel->"In[2]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"y1", "[", "t_", "]"}], ":=", 
  RowBox[{"1.5", " ", 
   RowBox[{"Sin", "[", " ", "t", "]"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"t", "/", "10"}]]}]}]], "Input",
 CellLabel->"In[3]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"x2", "[", "t_", "]"}], ":=", 
  RowBox[{"2.7", 
   RowBox[{"Cos", "[", " ", "t", "]"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"t", "/", "10"}]]}]}]], "Input",
 CellLabel->"In[4]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"y2", "[", "t_", "]"}], ":=", 
  RowBox[{"2.025", 
   RowBox[{"Sin", "[", " ", "t", "]"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"t", "/", "10"}]]}]}]], "Input",
 CellLabel->"In[5]:="],

Cell["Generating 26 discrete points for each spiral,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"x1", "[", "t", "]"}], ",", 
       RowBox[{"y1", "[", "t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "\[Pi]", ",", 
       RowBox[{"3.5", " ", "\[Pi]"}], ",", 
       FractionBox[
        RowBox[{"2.5", " ", "\[Pi]"}], "25"]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[24]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"s2", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"x2", "[", "t", "]"}], ",", 
       RowBox[{"y2", "[", "t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", 
        FractionBox["\[Pi]", "2"]}], ",", 
       RowBox[{"2.5", " ", "\[Pi]"}], ",", 
       FractionBox[
        RowBox[{"3.", "\[Pi]"}], "25"]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[25]:="],

Cell["then displaying these points,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"S1", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"s1", ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RGBColor", "[", 
         RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
        RowBox[{"PointSize", "[", "0.02", "]"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[26]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"S2", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"s2", ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RGBColor", "[", 
         RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
        RowBox[{"PointSize", "[", "0.015", "]"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[27]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell["\<\
Show is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed.\
\>", "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 RowBox[{"pspiral", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S1", ",", "S2"}], "}"}], ",", 
    RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
   "]"}]}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[28]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-semicolon-Show", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-semicolon-Show", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pspiral", "=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"S1", ",", "S2"}], "}"}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}]}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[28]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
eJzlWVlTE0EQXshGLTkULMGEkMMkBISAQLBE5JIjPoDlg4AHaMWIxVGWFvLq
7/TnxOzO5pvNbPdmwiYRS6qSDNNfd3890zM9s7tbujw5/la6PC2XksWL0o+T
0/LP5Pb3i2pXqMswjN/WJ2lY7Uq16XydG5VKxQgZ9j/VlvU5tb+NlovOrJ9u
AyDRbxo1EdHhUekk3204T/OgLVB+GBAk3Y1aLRsT4uFfCVE3Dy9bP2HY7LZa
ziAfCXbVP6Fv1ulX/0ze7BdF1AB+DN8+oE7OcXtE7tEdx7Su81o5JMhaQJCW
O4r/LfRV0PeRh9+s5WjlU8tsOuz2Ca1BHr4HJveC25wgcMvqzE7A4wofTCNL
1yRVOyRaIkYjry6VQeTuGEY4jz6nAgxgFYwRNichlcb2VcU3aMm+PZXCPlqD
KuigXqREPADpPEEw6cpHSUExsYXwUzrwbd6PP1WfectAcUOAyoICs3WnQfCF
C66AwjqKakWxPiYyJavSOvKl5VM/i7AUdXy4QYw9d6k2oWszo4LzwFM6fOQZ
oaKCzpAYdwnQgTqdUtQPxbcCRG1PqwS7OwQuDapzwtg4rFOVqYDwZ5vz7VGU
W/ATlUKT21KCoFDk4XEE+FKAluB/ujnrN+qJ29Hlee7h+iHQh8/5EnxPEOxV
CVJL+B0Goo8fLR/rzZycWleEpghCSrGhFScRriwC2eb8DOgorqtkFtBR4EOV
62M+ICjFEW9EIaksDG3rRXW2scRqJcGg711SikOCEREmEgScunBlOLNK3zjR
90C4ilk/9nVK1xiFy8CKE8EQgmOuYnEAqPJEBZtl+XmMi0Iorp/KnS5Da7AT
5IWqPFwO48iFLFrscNnSHFpRflHNEWlX4OGzSOWFK9k0sV6m0VogTMhC75zR
Qs50GtX9o9b6hVbCVhYnGbuDuogF6qufqpob6llCcF//Vp89ENQZUtdAWE2N
+wRoCNI+zfVL9SVghdoZInxKX62kfiYWgsnDS1hc4ZbZDHQhzRC+Nnl4Gvy3
xDgbKFxNWroGO1XrBlM+s0zxIPn0MxkQRLvTPDP2QvmIB/WAxmFAkJa7q83E
Y2JqnxJwn0dQM0ihRUJR3udWWuaxjcd7H9EhQeg2D1/GpMUwBD08/DkSIdac
H6k4oUPmUcPY/Z/ORAl2Oy5FsmoRBcS2sCsUNwibcUJRPrsZ4VmMIlS50SYJ
Yz7Pc2IY0jThZ9Th4lZkBstjbxMR+DzjkRHstCx5w0QgJQH/QIio04OJ4RTF
VdzN7Y7+9nj0iUc+y33mAtkjm8doL/L6Uzog2kkr95kCPFDHewc0D64+t2ct
kJa7JiMZhs0ZYlrj6uwMg2ce6ZPgrQ8BPt3AOkvrtQC9QscIH+Au3EV1QBHY
PFedRADqxAvpjhfDvyA6ruWL39at+yo7R2TTqjBBvd7OIVfXXCC9IuDj6r94
5V1RRfLNgydjPdj2Z7fR9QfpjsZu\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{215, 215},
 ImageMargins->{{43, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[28]:="]
}, Open  ]],

Cell["\<\
Figure 6. Two intertwined spirals represented by 41 points each\
\>", "Caption",
 TextAlignment->Center],

Cell["\<\
Creating the teaching set, putting these points into one list\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xym", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"s1", ",", "s2"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[29]:="],

Cell["Generating the labels of the samples,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zm", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"1.", ",", 
       RowBox[{"{", "26", "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"-", "1."}], ",", 
       RowBox[{"{", "26", "}"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[33]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "zm", "]"}]], "Input",
 CellLabel->"In[34]:="],

Cell[BoxData["52"], "Output",
 CellLabel->"Out[34]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "xym", "]"}]], "Input",
 CellLabel->"In[35]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"52", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[35]="]
}, Open  ]],

Cell[TextData[{
 "Applying  wavelet kernel [5] with parameter ",
 StyleBox["a",
  FontSlant->"Italic"],
 " = 1.8,  in case of  dimension  ",
 StyleBox["n",
  FontSlant->"Italic"],
 " = 2 "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", "=", "2"}], ";", 
  RowBox[{"a", "=", "1.8"}], ";"}]], "Input",
 CellLabel->"In[36]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"K", "[", 
   RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
  RowBox[{
   UnderoverscriptBox["\[Product]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"1.75", " ", 
       FractionBox[
        RowBox[{
         RowBox[{"u", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "-", 
         RowBox[{"v", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "a"]}], "]"}], " ", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{" ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"u", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "-", 
            RowBox[{"v", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "2"]}], 
        RowBox[{"2", " ", 
         SuperscriptBox["a", "2"]}]]}], "]"}]}], ")"}]}]}]], "Input",
 CellLabel->"In[37]:="],

Cell[TextData[{
 "and with parameter ",
 StyleBox["c",
  FontSlant->"Italic"],
 " = 100"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", "100."}], ";"}]], "Input",
 CellLabel->"In[38]:="],

Cell["The solution is", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "=", 
   RowBox[{"SupportVectorClassifier", "[", 
    RowBox[{"xym", ",", "zm", ",", "K", ",", "c"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[39]:="],

Cell["This run could take some minutes.", "Text"],

Cell[TextData[{
 "psvc1=ContourPlot[F[[1]],{",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 ",-7,7},{",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]]],
 ",-7,7},Contours->{0},PlotPoints\[Rule]50,",
 "AspectRatio\[Rule]1,",
 "ContourShading\[Rule]False,DisplayFunction\[Rule]Identity];"
}], "Input",
 CellTags->"S5.34.1",
 CellLabel->"In[40]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell["\<\
Show is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed.\
\>", "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pspiral", ",", "psvc1"}], "}"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[41]:="],

Cell[BoxData[{
 RowBox[{
  CheckboxBox[False], 
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "ApplyAllInstances"],
   ImageSizeCache->{356., {2., 12.}}]}], "\n", 
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"compatibilitytag-semicolon-Show", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{
    "compatibilitytag-semicolon-Show", 
     "Discard"}]}]}], "CompatibilityControls", "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pspiral", ",", "psvc1"}], "}"}], ",", 
    RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[41]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
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
D2ivag==\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{228, 228},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[41]:="]
}, Open  ]],

Cell["\<\
Figure 7. Classification results of SVC with the nonlinear decision boundary\
\>", "Caption",
 TextAlignment->Center],

Cell["\<\
The continuous classification function and the decision rule can be displayed \
in 3D, too\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"P1", "=", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"F", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "1"],
        TraditionalForm], ",", 
       RowBox[{"-", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "2"],
        TraditionalForm], ",", 
       RowBox[{"-", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"30", ",", "30"}], "}"}]}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[42]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"P2", "=", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Sign", "[", 
      RowBox[{"F", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "1"],
        TraditionalForm], ",", 
       RowBox[{"-", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FormBox[
        SubscriptBox["x", "2"],
        TraditionalForm], ",", 
       RowBox[{"-", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotPoints", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"40", ",", "40"}], "}"}]}], ",", 
     RowBox[{"DisplayFunction", "\[Rule]", "Identity"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[43]:="],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "IssueTag"],
   ImageSizeCache->{109., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[TextData[{
 "As of Version 6, GraphicsArray has been superseded by GraphicsRow and \
GraphicsGrid. ",
 StyleBox[ButtonBox["\[RightSkeleton]",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphicsArray"], "SR"],
 "\n",
 "Show is terminated by a semicolon. Graphics output will be suppressed if it \
is not removed."
}], "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 StyleBox[
  DynamicBox[FEPrivate`FrontEndResource[
   "CompatibilityToolbarText", "SuggestionTag"],
   ImageSizeCache->{104., {1., 7.}}],
  FontFamily->"Times"]], "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", 
     RowBox[{"P1", ",", "P2"}], "}"}], "]"}], ",", 
   RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], 
  "]"}]], "CompatibilityInput",
 CellTags->"compatibility-no",
 CellLabel->"In[44]:="],

Cell[BoxData[
 RowBox[{
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "ReplaceSuggestion"],
    ImageSizeCache->{228., {2., 12.}}],
   ButtonData->{"", "Replace"}], 
  ButtonBox[
   DynamicBox[FEPrivate`FrontEndResource[
    "CompatibilityToolbarText", "DiscardSuggestion"],
    ImageSizeCache->{192., {2., 12.}}],
   ButtonData->{"", "Discard"}]}]], "CompatibilityControls", \
"CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"GraphicsArray", "[", 
     RowBox[{"{", 
      RowBox[{"P1", ",", "P2"}], "}"}], "]"}], ",", 
    RowBox[{"DisplayFunction", "\[Rule]", "$DisplayFunction"}]}], "]"}], 
  ";"}]], "Input",
 CellTags->"compatibility-yes",
 CellLabel->"In[44]:="],

Cell[GraphicsData["CompressedBitmap", "\<\
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
c0iZDGdRHERydNgZD4lgO+KHt5sJPdHPRtI0mRm/5rp7fSM6jPwM1Zp4UKxh
c1eFj5ilBmQpqsIi3k4saXaSJqLPY9QJJzPY7Z5oS8DBhr9OTP9fnDVGjohH
Lgd9PiiGqqiklF63nzCHgdKBUJOa+tfPQZZ8wHZL5TqL654xEx0xI3+/8m+3
2sjw4msftmm9Dfezzp7aeAvDDKECEFkpzpnyEMtwpi9ZTBPvbxx1Y5lawo/W
PNgx0esdP4bNhOP1/THgk8teY4ARxToNm/KPfMBsvy/Yl0MBlOYpAkr+v+Se
p6xUl16tY6+jxq4xSMGX3tIRJiLBx5+42obfF1yolQ26CuzpOTiseORgovHq
DqTUsoudvfq4ZOKn71m6C7fcxTR5QzUzXu6WtZHled0vJK+33qxKlj/GVsGr
kS9T2q+eOcrfo4N9HVKaUr+2+bpoAsTRJCJ3OHjMfaaQMVK57LVmwBUEG8mq
BYu3uHO2vizh+LIeOsbKCXXwZ8fOqMxxRFxRx6b91F69BFkmmqojy+rwojEK
CbjKZa/5A1l1jEkeDj9oOpsMbOlFji6RgJhZR8eUbyrFSmMAFoSdEXDSTDue
vGimgZUavNhsLV6tc0SwWbzt0nvtFZbpN9kXVKsTw7smWjs1yy8r2jlFXTfx
MKLU5Vetlfs7YMz0sjh1PeO1oI5JW4Ihwl56rvUVC62EMn9h0OVpTDmAhG+n
RlPmdJ3kATwRbHsfdDOdI1CnFxtxuTCnYYBOwwCdqjKgg0gwuNPVVsGySe5l
7+c4wKCmCP4gQqLvjYigbyZlUK8w/nLZa1iwb5mRqHUNCk00Dgzy9dBg53ix
gehqKbJyItiO+L793C0Y5MTqIw8xYZCoPYmRCMF24HdXUwc6QElLBhA5H3Xv
UyJWMdevVcUBjcIk062Z5ZDY1KIm6aH5Ettk/zNG4ExzZ8TJ8cxTbArQEHPl
jJd1Y4sfv2kaQ0dW1V9kehWuulilHn5u3aWGqQ1s/Jv+ZKbGWFeHv6nXzone
znXoed8x4CZ/9/3WKpuyAGOqPWDMOKNpU8umlQPCTPTSK87T50TuhIqNY6gj
ywYAL22c4Jts1lkzWL52uEjdRcfbD68AKRo49Rw1N2bbbAhWCE16iaPJhPoD
kOjwff9WE5sSfeQh+0nJiBuIGT46iIKMeImsMHMSsV05/xFNzjFkrbf80fj5
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
/ZkSqkZLjycO7Dj7k/8PW93M9Q==\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{416, 160.688},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[44]:="]
}, Open  ]],

Cell["\<\
Figure 8. Classification function and the corresponding decision rule\
\>", "Caption",
 TextAlignment->Center]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. Image classification", "Section"],

Cell["\<\
We should like to classify  images into two different categories, snowman and \
dice, see Figures 9 and 10.
\
\>", "Text"],

Cell[GraphicsData["CompressedBitmap", "\<\
eJyMvAdYFFfb//8R7L1FU4y9i71r7L0mxmiixqixxBh77733gqCA0sGGFEGK
oAgqNrBgBUEEQXqvy8L+75kFNO/zvO/vf10cZnd2ZvaU+/6WM2d2wpzVC+cv
mbP677lzmo5aOWf5wr/nrmo6ctlK2WVYDgxaAhOborzWycuSfzr50/9rrfxT
dv+/dtRQN1Uplv9ZGbnkZmnIyCggLVdHukZHQYGUPB358j43t9iA7DwthuTn
aMlTdufrMKCwUEdNNHJ4bmExecppWh3Z+YXkFxRTIO+LinQUa4vQFUopKKC4
IJei/ByKi+WSWk0hVSiW/9qSUqTNl6JBV6yVQ7QUFmnRFBdRHq1WW1GtcnU0
RdkUyquCkqLRFaOVrVYOLN2vbIulLroinQE6ra688spQrquTa6k9UawvcqKB
2glfqdcoLik6jXquekixpgBdXj66fCnSLbpCpWjlsyL9tkCKUukijfRIgXod
9Svk/Arqq0ry+ee6qdfV6q+dI3U3IFf+S9/KZ7larXqMAXm6IhmevKJCtQOU
tmmLlP4sokjOy5fr5ctZWXJUrk5XUb60yEC9omFZvZVSVf1+Q+nMkjrpSjvA
EE1hrrRVo17TUNmnv0A1tQGFpR0hF8sukC8p1Ok7WWl8UbG+8cVKRXW6IvWS
hVI0+lJcWFFtcQ19O0vqowxmviZP2lKoP1zZpympq1xEObVQ7QnlC5Q6F5fV
Wa2fOn5KJTXyhUrN1d7UqsVArXGVki/UUiQXUgKjNBiUTlNea3X6OitDU9rO
L7f6YKihHv/vz4v17dYW6ztT+Z7CYn3j1GOKJDSVVxXJkQYWlAZB2XUKlSoW
GapX1A9B8ediUDIyckRZHOpHpEg9Wlv8xbBqDdTkMNQPgk5fDNX/aiB8eQWK
iyR6dXnVSpNHo5EEzivrWOWKRSWBpd+nBFiBJHCWvgLFapP01S1Si9IVRfru
0Nev4r+GqvSL1dQrLiprbLF+EIqL9a0qHWVd8efT9NFauaxT/3W5km/WlZxf
cqq25CN9B9YoO1wrPZYv+3OkLbk6rZpi+VLLfOXS+fp252v146uP++pk6/Jl
3IrKBkFNyJLrKQ0ulOtoP/ebvksFwCSWi/9HTXVqjBeVdXH5EjQoLgknrfpZ
oXqc/uvrqsfmawvVzFdyW8UZbSneyPGaIhVrCr/4rmI1tIrUaqtYpQyZtjSV
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
w51XHw0JevpeRP7dkAjuBL8j8HE4/g9fcPv+GwKCwgh88FYY+h2pWQUldxQ7
qLN4b8MiqVWzEZUrfkf1at9Tu9b31Kwt2/pNWbxsKy7X7ghVh3LT/zV+dxQa
f8G9u6E8CXrBS6Hzl7ce8c4vkEhvf2K8BOgF5NNuBJHp/wjtvVDyA56QeyeY
rDsPyX/6jOLwtxRIyY6LFR6Ol4gQQyiSRpn1zy/MplhR9dLNyj3xnLxs4WUx
fGpn67tcNbPFX87MdFQNTJJQbuLHVGJjRJp9SuddYhbRaTmkymdZypoCyZK8
vALy5PqF6fmk3HvDa1NnHizYg13bCZjW649pjc4cNWijqkyzCp05V74bVpLV
yvZMufY4NxlK6qId5GzaT+aWvaTMWsaHn+bg134Abk174mk0BN8eo0V5jubG
xLm8WLsfbeBjNImJ6j0MpQWKTlO2pQT25f0Aw9L2iAV9ePct15yCuOb2jMvu
z7jg9ZyLN0O5FhiG3/133JX6P3sYxtuQSJKehJMaEk7GozAyA0NJ831Esvd9
Mtz8iDl7geebjkp2z+RE/R4cqSpgWKEdJhXbYPdNL+6NmMGL6X/zaPIs3CdN
xWfKTILnL+fF0k182neK5OPmfHL3o+DZWz05CyopWqlQueeq1ROe4rb+d0Lu
ohJvouiFR28+EBqVoMqhPGVtjHJHp0irplCeIEG+MqOVmkl+TDwFYdFonr6j
8O5LNLeekS3aKNPZn6wrIiQu+5F+8QYZl3xJcfAi/pwrsWJlok/b8/60DXG2
V8i47kP+7TsUPREZ/UqERqQIjNhPqkApTkwSevtEemqGKg5SBGUzCgRpRf0n
CeS4uXpz1enafyXpzqqv2b5hO+sXr2W9+NctK/axbc0Rtm8+xa6txuzbcpqD
sj2y9RSHt5zk1I4jnFq0mf0T5rKt/SjmCP7/U7kN6wxbs1V8zI5KndgjnuZo
pW6crNYL/4kLSdhmgu78NTKO2uA7ab4AxnCO1WrNnZ/m8k48ToR4mngPHxmV
5+TFirJNTxGBmUK6ELVC0hmZ2WWzyIonVohaibQKJSNSqHriGKz9PmIhLH0l
JIE777VcuP+emxJp5ssPc7D7ZHbX7cEmqed6g1YsE3DbVKUjexqIsKjakcXC
BbMMmrFMVOnWdqM5Mmgau/tPZW2XsazuMZH9o//k9JRl2Py5mUuLduOx5hiu
ImpcVu3BRTy/+R9LODZhBvZ/LOXdrtO833CUgInzOVOrA4Edx/JeTGrscHn/
bRfMB0/S33jVFClyUN+MVuoM0Uxl8rpcO7bW6cfqcm3FlTfnH8OWrKrUgXWV
RPeIbdxWoRM7JaF3GnZid4Uu7KvYmb2S5AcqtOfcNwM5YzSce1OX4S5207nb
T1g2+oE9NOFcJSMsRCmcEe1k1rAXLj1+wmfQDIKW7yDKxJ6CG/fRCeBkinLN
UaYo0jMl6MUhVyzxxf/J0Z1LONpX0La2On+s+N8qlWtTrXItKgs3V6gq3F21
hup6WjWXBkzbyOW5h7g0ZBHWDQZgWrsrx+t152C5jsLJImPE+JsYdMNEePqM
vL8o22uVe3K5ag8u1ewlCGaEvUFHHKTxjuW7clFeu8o4+jTqyS1BLv++owmZ
uYK4A8bkePqgiwgXBZwsxCfxIwJQ4WjFF2emppWQXFtVRoe+iyX0g6Btupb3
CkFLzOXmiNTNLSIhW0OYZPN7IfKPT6J57XGPB8fsuf7PTuz7TeVoDSOMRZTa
GHSRenXhkgyKT/1+fBw8l+ddJ3NRFOHlup24UL8TVxr3wrPzCK51GsalHoO5
3Gkg1/qMxe/XeXyysRcL8VxYRCRcVjqaHCHq/GwD1VZVUPlZUavZ2dkqSH3m
6faqw9jb/AcuNxvBk9ELiF+8m4wVB9FtOUW+hGmsdMnDoVPx6zmGW33G4C4x
4tp2KBdb/IBdk3549pzEo9F/8eKfg3zcZ0eciTOxV27x4cZDovyDiXjwgggx
o2+fhPFcHHHIiygev/gg5jWaByEfuP9EyrNo7jz7QODTKAJCwlTivvtYeF1A
/emraFJzikq5WsHQl28iqFa9MXXqtKN6jeZUrPQNdeq25K+FG7l65Tauzndw
uxaEp8cjPL0eckuqcs/7Ic887vD6sg+hVs4EHzhD0PpDhKw9TMjy/TxdcYDQ
1Yd5Ja/DVh/k5fqDPN+8j+f7DhF53oKEq5dI8PYkJzCAwuAn+jv2igESflak
jk5UnMIDyl2IwlwpWRn/B1e3V81ZaoLYhoQMlavfxaXzOjGDt+KBo5Xlllr9
zUplUlkbnUSy1xMeb7HA66c1OLWexMXaA7lScyAO3w7Cqm4fbGr1xbpyL2wr
9MTOsCfnKvTCXJn6qtoJjx5jce4/Eoe+ck6LjgT1GoFPix7catGHu+0GcVf4
+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
npOspwZPzLMIwgJfEv7gPS/DUnn2IYPnYRk8C3jPQ5u7XJ19EJfBy7FoPgnz
rwdztmJ3HGsOUIPIVBDKTIoi/Aw4K9Kvhjph7/71KFzqD1OnBhwlRy7JKNmV
b49NdWGHrxRxKKNUvxUODTvg3rSPnOvbYhDV8W89kDu9xhM07Dde/7OJZIer
aEOeUiAjojyTma3J/7zSWVeCSJ1UzlPcaZJQdHRKFjEyCkm5WtKzNOSqc2My
ePI+y/0Bl7v+hnOHnyXtRuPWcBjXaw/GtVp/LlXuLTzcE1uRHdYo1RXpUUEk
SMWuuEpzfeoPlxwbjEutPlwSKHjQbRKxkxeJMJxD9LTZhE2axuWmkk/fdud6
+xHcHTCZZ4u2kC8EURAUSkGCCDzlLm5OKhlZ6VInjUoONf87Vy+fv4oVs1ey
Ys5Slv25mCVz/2Htn/+wbdYi1g+bwipBjiUt+zCnYjuVqxdXbcHuFr1ZUs+I
v2q1Ze03vVgs3LtUtkf7/YLpwN85O3AmJ7uPwb7LOMybDuBEXZH5ov08vxcZ
0nKAuLkO+DcbglMVI0G0Dlyu3gPv7uNJ2mtCupO7AKoEvGjTxLScL7g6U7g6
+wuu7qI+Y2G9zRRvCy+cb73lfEAcl4Ny8bnznl0/reCXBp25tngrq6uJiRbY
2SJJsLx+X/b1+hXjqcvYMPZ3Tixcj/kxexzMXLATyLE55yr87IqlmGJza2eV
s8+bOnJWCKF1y2706jOKrRuOcFaMtbXVVfXzX39eyPRJi3G9eBtXtyBCgt/z
wO0OkZbuBK87zqGaRvh805+iVYeJcL1a+hTpZ7ouZFLD1qz6rjsHxGFubNiD
VXLKCpFA62guVK2n611Czco9/oMVeqhwpCTDWYMOmAjCGlfoirkY7OjfNvB0
3EJcuo5kp2F9TtZtxrFKHThdvpWY7Lb4fPuDyF6BLYku2wq9ROy2w72c5Har
n3mxYAdR4mpyP8TzKSlVXTCVH5+l0nWSkIRy7zZZ6PpTYgYFxf9B1znaHHz8
falSoyYGFapjWKEOtWo2pla1b6lb5xsalqvJz82Uh8jGsL/1FK4NXIiFwIll
m3HsrtONA836YdpzPK6i2rxEhPrsPoHXHmNuHjDnzt5zPDQRSj5+lhBjK16Z
OfDxghtZvrcpuiMUfOMReRc9idh2BI8RkyX5BnJ/+M886fsL177piYmolxvD
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
/AIzpT86tu7D3h2nOXXCQY7zwnGHGY7/SN91m8C6ziO4fcKSsOsBBD4Lo5WM
koW1O/cCX3HX7zGPA4LR+YVg3nKwelNW9/Cp/oeQCj8ThQTWmJotmSVOepHk
6sKKnVkg9PxH3b7M/2Ywf4uhWdd5CjsGzeXAmMWcnCa89/dBrJcfwW7lES4s
O47DoqNcFno+Kt1gMn01Z39bisuCLXj/vZMbv6/k1pS/eTD1L6JmLiHsxz+5
3u4HrjcbxLMRf4rxmqKuM7MWmeD59WCit4qXC/ukToDHZGSSITYhN0E/0aE4
7GjhuVLaLv5M28odIc8bN6F8LcpX+44633RiyqyNrLW5jPWRC9j8uhWntae5
uuM8tkPXcLj5T+xtOYFrM3ZgO28XZuuOYbz1FDbHbHA47Yi9CKYrFzy56ujN
VRFU121u4G1/k6sWbjhZOHPDwZuHrvd46BxAiPNNnjl5E3zuImEitlIveaLz
DiR2tyiWJh3Rzd3IywG/4Dd3GZqoDyRkZPM+IZPXH1N4E5vyeXVfF/VXJ97F
JvI6Pp23STmqNE8VWszI1ZD+KoboK4Fc/GUVl0cu5MrQBZxvNZrD4t1OVeyC
sYzeCVqrz3BbfS/p3fVnbo2ay6uFO4jbZkzWcTuSzl8g3daJvEvuZDm4UOx6
g8KrXuSY25FxwoLE3ccImjwbvz5juNN7LPHjZqtTUldqGeE1cBy6JyFkJycS
/S6S4PshUp6U0baIqC9p++ri/fjO2M2tqTu4MW4VD8auwX/aah4u2MqLVft4
s24/79fu4e3SrTyfu5rngp5Ppyzi0YiZ+BiNxK1Jf67V7Y+r6Dt3CQy/VuN5
0G2GIOlMQnrP5qG8DuzwiyDVRK42Hcl1EWW+k5YIEZnyyfgqCS6BJIlRi3/+
nleRQtexaarXVBbopWfkotXoymhbeWy4QCe9rSMyQcedh9EcPGTJ/l1nObr+
CKf+XM+JnxZyuNdkVjXoKVK2BRvKN2N3tfYYK+662QBON+3P/q87cUih4+7i
nCctxv/nf7g3bSkhc7fw/K8dBP66FJ8f5xK1ai+6Y5Zk7jyurudz6iSj1b4/
N40GcaNFH659ZYRbVRnFqi1wE/f9YKyYpsNn0QQ+EN0Xq/7sn6L99LRdIpY6
q6YiMSGVZGWOMCFNpGEuyRl5oniFI9LySIvJ4M55D9LuhpP6OILi5wn4Lz2J
Q695YlWHcrRiHw4JJ+wXur0wbC4+0zYStPw4ofvsCTtxlRfnvQi39uGdnR9h
F28S6nqLZx63+eAUyKdLPiRau5Gw35yPS/cSNmO9OO7fcWrVV1x3TyL6/0zw
L/P5ZCJo9SaCxw/ecefu67JJ8Ypf8FyR8JlW6p8aFis8Ha4+DP8s5hNxL6J5
7ejHw9Uywlsd+bD6PC4tJ+NSbzQXKvUXi91NXRpqYSguQbjbWpLCpmp3LjcQ
ISgw5tFyHH49Z/Jo0AJChszj6bgFvJqzipjVu/m0eS8fhbuj5q7ijQzRo94/
cqf9cPw7Dia4/0ReDvmVp0Om4DJ4PE/WbiT3xUvSYuPUpa9lP9GmK/zy9xly
sjPVXw7MkVFS1vcl52jV+cOoqCg+xYhDV9YSinJ5v/wEFxr/iHn5/thXFENT
fhjOVSUBao/Ds/ZwPGsNFroegFv1frjW7C8U3IcrtZVVrT24+k1vXJv9wN1+
YnqmLuTD9H949eMfhIjs9ukwQGz7D2KvRQBKctzpN4Ynk2YR+vsywv/ZQY7D
DXRvP6lPCyR9TCYpNq30B07/g66LOLL9ALuXbWXz3LWsn7lYKHsha0ZOZ02P
8Sz6tid/Sk4srNaW5Q268FvN71lq1I9NIyaz9pd5LBPcXzFvLbtE+u5ZdYCD
m45zercpFnvPYbHTnCMiHs4dtMJRoThjay6essJ+jzH7/xA4EHer8xO36X6P
K33GYdm8B+F9puBYuSUO9TvwZu0uCp6/JCcpQQJdoessVa++CP+gPgdXmhzK
Tw6ma5SbrOKsl+xmy+h5nN5vhr845F2NRnG48QSMR6zEeO5xLh/2Yt9aM+xN
fbA18xY37YeNwy2sHHw5Z+eOhY2b+rOf5mZXBCNMmTR+Nt83bCXuuiPrlou8
P+HIGWMnjE9ewmPbWTYKvx2u1wubJoM422k0zzccwfP2Q7zFZU8YO4t5s9ep
bvt28Fve3xPaFrpf+l1n8h6/lOAqKksO5aH9CV91Yma17ixsOFSk0AKM5+zk
0Nz9mK0+i/UWayy2WmG+yxazPXac2m3P3i1n2CQYpkzO7xULYnbYAcfTTlw+
cxW7o/ZcOGiD12FHfA9dwE+khcs/27kyaxUfdp3mzZJtorX/5IXIKHuxKZfr
diVx/DIeGf2MY7Uu+A+eQ8p5d3IfhpMh0JqclEFqkp6nY4XgPsRnklf6gzml
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
LlZ/PntxK8fD6jzyxSpdF4vHKLX4zrSJ/s3VUhGeK0CrpShWRFuKnphUHfFp
Ogkv9SSJE0jJrBVYV5ORVUt6Tp10IP2Fgi6ic0VTV9UPUFs3QKHYUXMzD7Yb
mWPnGkV0dqWaXr5WQlJDmZizyjaxmzXUicnp7JhgpGGAjoo62nV1DI4pSUaV
YqJn1VB06eSN/KtU1FLG8djYCGMiMi5CuiKrjHIxjPqiXvKzWomX3hIeVUl8
SgMJaU3E5TSpB4OjpVli5RUkSFMmi5hIK20ns1Q6vaadHE0PeWX9FNcIlcWE
aRs7qGxplaudWoPElKYpCiqHpF3q1UEVEVFBVnwL7UW1dHu60rBvPy32wWSL
zvePLpW/XU9j09gFzXTm3y21QFqplDE7Nc2sWNK58Wkq8orw3nmMr25/mB8f
/Sf7lq3F5LATx44GqJLnsFD4iHp5Y27pj4WFP1v3mPLa299iYu6P7TFfnLZb
Y/TWUnZf8TDOIoqVxEgJqw+LA6gUy1nOjn3mHBBh6uwRg41tIDn5NaIA9TI+
yulJKiLp681q3qez6UXikvRUyjgpz69QN9iU5mmYmb7c/fxE6bPT42o5wcmZ
Yc5MDNHVM4FfRKHq2hRKu/rlctIjC1sR4bbS8RVCnzD1EPvswBEjU/ZuPCRw
PsiudfvZuXYf21bvYuPqLfK3ruIPv/2TSLUreeCuh3nyoafZ/8M+TDYZYy+2
29vajxD3RALcU/D3ScTK0o3l323k/sef56RLMAVV8vakl7W0D6gRubOl6yKo
fzpFPoexVQAmdrEcs4tQd3ua2yZwzDyQf7z+CftE09uaBmPy6R4Ov/QtB258
AfOrF2L7y3txumYhJtc/hfX9H1Ij/M1IKBVOl+MakIRfcCbRsRriE7XEKMsO
ueKucmRwibEsLTKQX95IlgyErPJ2dBKxB/yzyVi2h9KP13A2MYe5oRGV073j
EjZHzqm1XvtHpv4Xp5X5b6X+x0VOj8p9oGOU+OgSQiWSeoZX4CyXm2inU/5F
OPkXykfNw803C0+5/JT17IAc4kSUBwalEy6+NC6iiLCTPiQdsGLfr+/A7/pH
cfjtQ+wUTz1XP0ytRE2lFylHU2qr26itaaJR3yQ+tYv+FhHeLaIVdF2UlDVR
2jhAefsElb2n/wun7/gZp5X09Mo05mhnN50B6ZTYh1IUmKLuaouTUBsXX8lx
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
ETzHV3QRV9RKnBj6qMwmwjOaCJUrVhAeK6InSbgQn9+kxvHUTCWjSQfFMrRr
/NJIeX8tPtc/TOjvHyLk0deZKqhgom9c+tRptTZpgV7eUn0rndK9OnqVk3MD
6vnLOuFeXuMQSdr/E9EX68iodd4m5+vh9LX3qcXWMuXjpRbKI4iiiM1oICqt
TjBdL266jvj0GnGlNSqqUwXTmQXzLrqovI18bQuRcYVY2fjy8ac/cEjMR1Je
DR0toxjKWzGIuWjyTaA9Np3Rimr6BH055bVEiDzVtSo7YMblMXpURI9OzjA1
fVqNQlde9J1nzqi1eyYEz0oOmwklgimZ22W4Zebp5PM0klzYToTilqVJFYkR
k2VQ8Ryb26Q29094bpnHs0AqW3RpYXmnuPpOynV96iaAysYeuQTNTeLKyzrx
DM5j5zEvLOyjcffLIiSqRN37ERiWRX1+NT2i0CoSysmRvxUpfyc+1yCq6dK+
pX/fA66myOvrY2JsvjrAtJKOZ3qW85MjLH31Y07td8JEWLzf2JX9Aoh9Cn92
2WJkZMVOIwt2GZmzc/txNgnbduywZutWS4z3O3Nkmzkn9tkQImxXmvp0sR6D
roWw9Hw8ItLx9IqXSFUm0GiiSteLtraFenkN1fLqKyV6Krv3i118SPWOICw4
jajAJML9RIl4x4lRiWFieOp/WmiFz2PyHB6habhHazgVXsVJvzysxeKesI3l
hGUwNmZeWB6yVwuAGq0/yPbVRvMJWFdsVrOwbfh2o3r/4r0lvPHca7zw2PO8
/uyrfPrWYlZ98R0rvlzNmm/WsGHFBjat2s6GtQfZutmENcuN+HLxd9x2870s
XvwNv7v+r8TE5pNWpNQFlIFtGBXFNDiv9H7aSqawTmnmvUd92W/qw84DInkO
+XJU5M62vdbsNXHBzCQUk832mK01wXetOR5f78HjSyMqXWNozdfRLGE1MaGW
kEgNfgKuwJgComUkZKSXkyvgKpbwW1LdTqXEnnq5lN1tdfpWanTS40SwFlS1
klPdQFaVeFFzH2YM/WoKvD6B7sjEtHosqH9YPPLAuHrY+tylIlyX+KwMbJXN
CqP7LyRTGZqiVn5VeHIlgUl1OEVWYuVXgK13DidcUrBzTsbWLgZb+3B1Z4+T
hM9TTnHY2Qfz7ltf883n64gOyyFEHjPJM5768Gx6kjTM1ojDkbBaXSqxSNMu
MaxKTUBjEN62KCkchkcFboNqD1cydA4PjqhpyXLFXpe1jqlbyUrbRy/xeT44
3aJqb6UQqHoNDAscRxlvHaYqs5rc1CoJRFVi9zP54rPt2NmFEmoVSOouZ/Zd
/RDOd72AyS0PMlMlPb5KR4FyALqonoyUUtVKV1U10aFYZtEKypT2vF9W4Nwn
UO4XTTDA0Ijo/dEh9d43pGy86mNwoEfaspu6ynpys8Sap5aKdy6jJKfsv8FZ
OcWYF19EkphNh1eXYfEbJZv8w+qZkdBrHybq+sfwvvkJTB74J9n7zenW1NPX
1K0WidLq2gUN1QSllhCUWEKkxEslfmYW1lAolCoVBdekG5G4MkZN+wglbX2U
d8jPtfXSLLGqRxAwKj3kzMQZzkyeVjfsTE5PqbUVlPuMUhZFBqwEn4twVtZ8
lHOvozNzDE6cVXNDTk6KKDwjam/2HC0DZ4kRZ6ZsOjwVqsEtsgJHZQ06rIxT
AmlnxT9HanGPq8YpSoOJaxL3P/c536wzxyeqTMVFZEgWaRbenHh6Mb73v8Gp
+16kcr8lM6KVGwXEOdUd3PjXZ1j49PuExuWrNTybRHN0GroYaZbvySqkLjNf
zepSJupO0zGm7v2+BOfr1aMd+9cd5v3nPmP3j0epiy1kTig2XVYtNryMoVK9
/KkeMms7SK8SMGu71Cnt8OwmCY2NCwgVEXE7UVl64gsN6pVR1k5JlfTZwlZ1
kqNUpLYuIoeGvXYcv/qvamaysLc+Za61U9Wgnd0T6FtHaRyaFS4PqWcYeoeH
1RmvnoFpmttGKdL3kVzeTUJho3qk/Wds/uUlNs9Xz1T+vU+s6jwLlWFVLIol
TSJNrAw5RVZEZzYQma5T+RyVUktkcg2xKTWqnU7J0ZMtj1EsbCuTBi4Tk5Jf
pCcyJpfNO0zEPKVRLC3SL/2oX0xMs0skce+tJPyjr6iztGC2oZ3mjj6Cs4pw
DEpQE5929Y7NH84fm1QPTZ+/+NEfVQ/OzZ05y4wyaTE2pdZrHJeu2DE4IVqy
W+SEQcVunKicwGwdEWJmIrME0xfwnCBXkmA7sbB5Hs3K5La2g9wKMS/VnZTV
dcnw6FSxrCC5sqGP7NJ64tK1HLcJYZvw0totUaRIF7X1w9TXCsKreqQpKknO
qEIrTVZe2Uu6GKVIbTvRuY2UNwxeWIb+D/d89qwau0aHR9Synacn5aWMjskA
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
nNwQFByB8uUqc+oGoVOHfohNyI34pKKUx2OwZ29adrOo7xxjH96jdav+aNlq
OBo164dWrYaiTcuRqFWnJcqWqYxyZWqgVrVOqF+3C+o3bIum9dqjaZ0OaFav
E5o26IyWLXqiXdu+6NxxGIc3Gj26jkCXzgNRkdSjcbN2mDB9BeZSPGw/Ivsm
TXmbTnGPnT1/l2Keguc2bfONB6RGFEi0huKFOnSKxO7sLfV9cZqlXeKVdgPn
zl1VifV//fUFnL87PIhsT+zw27eZqm+ogLP0xV69hyaIimACNc7YufsxauJW
DBm7DH36TsdAqguJ1vVsPxw9u4zAAAHnzqPRvV1/tGjQBk3qtUa7Ft3Rrk0v
tG/dC307DUa/jkMxpOcoDB88AePGzMDoYTPQt/dI8psequurJDdIMeZZws9t
KmORwOJsf0xku00sOXLtKU5IL9Pvws9/l9l/UgmT4ix4+uSNqvm5/fgNdqSp
glUs2ngF01efV1lHv8/aiTlTVmD2+AVYMmYBNg/6DWd+3YBTC7dg34a9WLdl
H+Ys+ROVKzWGSesOo8ED23ecwglu+8NSGX32Js5TTUl3R8k2v0szK65uSd9+
+uVQvqcEqVevn+H1q2cKobMPxXuHMwcvKHTeu/XAv8lnKTGWZPgl685j1Zbz
2L3nJg7ty8DptOe0io/5dO9gPy3PobT7fM3Arv13sWTtSaLEIYzikPKWqIPg
6EIIjy+C3rQBW8mvLlGC3Hr4SoGVRDczvhynlkFVlf7olTpt406GpO88V45w
mfon/HkF0bSo9krU2Kv44F/vv5fP2S3VMz9m/Y3PRAfB51cfPmPrsasYx7GM
W3UO45edJb87gjHzjmH0HL7+fgTj5+7DpD/2YeqCfZi2cD9mLT2IeSsOo2rt
LvALyYPa3CFSt7CZonPPhn24uuUIHqzfh6yz1/GBVCKDEkgSMI6QsSjf690n
SLt1K9uHynuVhMivlv7m7ac4cuqm8oVupEWX7Irv3GAyjEV5amFXeCVsjCmH
DXkqY3tKFeyKqYT9zYbgHfWy1CT/efkx1p24gyWke79tv4xp689gyvITmPbH
UcyaewTT5h7me3KORfJ+JzfxEJL9fGjQdCAWc3UvWX8Em1cdwu51x7BzyymV
0neKj1KSJAeN/w2xqaXg65+ijgSRBuOSaSjmXYBajge5fv8BdlERrj989dvp
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
\
\>"], "Graphics",
 Evaluatable->False,
 AspectRatioFixed->False,
 ImageSize->{548.75, 78.375},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[170]:="],

Cell["Figure 9. Representatives of snowman category", "Caption",
 TextAlignment->Center],

Cell[GraphicsData["CompressedBitmap", "\<\
eJyMvQWYFOfyPXyYdcUdAoQYCSGuN8mNk5AQgSQEdwju7i4Ly7L4Ioss7u7u
7rCw7u7uX53q6WG59/6e789Db/f09LS+VadOWbfsOvyfngO6Du/TvWvD5kO7
Dv6nT/dhDb8fNFRW2VUALJ8CeK8huFwmi9Y/ZfLf+PMZ/3D1f6yopjMHlJQU
oVSWCmTKt84tKJK/dijk59IynRvrXHU5v8SYuEa3KStBnnVb/l7WW1AiH+xR
WFoimxRbNy216PYOyC8tlVX8qtS2F+MIbvqTYlkqle+LS4vkPGW7ghyZG8s8
71L5fUkJ98RPjvK5GNbr06spLncWFvmWV8MT4lJpCY/FTzWt25cYxzJ+o/PC
wkLZfwlKiopRmF+A0mL5vljOtfi5/evVFlqXuZ57zc0r0vO20zWOKOE1lhTL
b0p0yi8skO9LnGynXoq8vDydl+quSo1Tl2PIIygtc9Sj2Zlf6NzOuo7H426K
S3iz5eeO+tEFRUUlulKnsmePSk++tETnFuTn58pOzJtqnE8ZDyvXbuxJF23f
1rauy8/PlyMU6TnrFh76hbOuMDc2f2jO5TsH6+/5W3O1nfW45Y/D3RQXF3Od
/sTCJXvr5uYxOLeUW1dQUPBsh3pV8qe05GV+lIspLbPuqtR20LKSUr143djC
TXRAGefBO1hUaMz1R3rPn/t5qTHpLy22nRs7cnxuE53kaDKe7MxTtl6rceMM
YSyTIcZNjSFmDEsnrpG9lVh3bM+LKrdj3pfSMr2nFh2v9nrrbBvw4o2zkp3Z
m+v0EDK56Qf7585Glj3/9+rO5XVHJZXisIQkBOw/huVb98Jv+34sC9iBRZt2
YOGm7fBevxVz12zE7NXrMWPFWsyUadrSVZiy2A+TfJfaYcx8b9THmHk+ujRu
7gKdxs+dj7GzZ2O6jzcWrVuH5Zs2wX/bDnQeMBgOlaqgfpNXMXbmTEyaPx+z
lizFzMXL0PSjT1DByQm9+vfFw6ePkF2QhcKSXBQW5YgM5MstKdTbQsEuLCy2
Kg5nvR18wikZ2UjNypUpD2mZebqcnJ1r0QVHLlq/LkAyp2xukmfRL15ASlYW
MkSGs2Xv2/fuxWdffgVUsMDRyR31G76Krj0Hwtt3Jbx8V2HjrsM4ePoKrj6N
xJ2IBAQnZSIoPgM3nkRi2drNeOu9D+Hs7oEKDvZwdHOCq2dFvPHW21jh749c
uYI8ecTZopJEpThYhZ0CnpCWhileczFj4QLMXOKr8xkLF2LWokWYu3SpDLg5
S5bIE/VatkymJTp5+/lZ5M9yC+YvXyW3ZIHfGixas942LVy5Sgb3whUrZRBO
mDoDHbr2QKfuvdCuU2d06NgZHTt1QafOXWUbLnmgfecuaN+zN/4ZNgorN23B
+j17sfXIcew9exZ7Tp3GgdNnsXTtOh03HN4lZeaDsDPGrHWkmSJCiTZVhSnp
XOZDfLad/XNaR/ZjZ2gLWatLrlbJLC21/x/HUjk1dmGvOze/lIMYesVQ1ElJ
SYiNjUVcXByioqJUZefmUn1mZ2fLXnJycvT7hIQExMfHIzo62tgz9+mhGtOm
5RW8SnSXXJ8mj878WWRkpG1uamBTZG16Q9WwO5c8yslpgegX3tm84jIDSh1s
gM5PeUUGfBgQbI+sIgO0OWVRf2Urnpqbm4hmKDgTgZ7tzkHXOehyfrFhQxDp
nqlHQ83zdvI+2S6mxEDhfAOAbPsttk721r+lpTYdxWVnXbC3YVluYZHIdoki
oJ2aDA6yrkBuQrFuY56mhUt2VnuGPyq27tPDBgvutqWO5dXb27qPiORUrNp9
CIt3HIHvtkPwDtiNeRt3YPaGbZi5bgumiXqbsmoDJvmtw1S/AExctgaTlvtj
7KLlGCZ6bfj8hRjqtUCXh8l8yEwvjBAdN2quDyYtWIBZIo4LqeM2b8Oq7Xvg
4x+A71u3BewcUPPlV0SUl2PCgkVUlxg9xwcNX30TNeo2QFxKihUheEn5chsK
1JTjuKLYiHFkaodSsVnyC4qQnJuHuIwspOYWIDuvFImZOUjIykFKXoHcpkRR
ZDWRlCN6La8YSdkFuj42PROpomziM7NkfBQjJjUFqzdtxHe/tETrDu3RrX8/
jJvuhSmzfbHQbwP8t+7HkXO3cDckAXfCU/A0NQ+RuWUITs2XYwQl58Jdvxs4
dALg4AIHUXAVnCvI3A0//tIKO/YfRW5RGTLFhtKnVVpimnhFgo1PIiPw9Z+/
4+u2rfFNuz/wfds/7fBd27/l4Tdv3w4/yBn92LEDWnTqiJ+7dJYj/tKtq3z3
a/du+K1Hd/ze4x+06tkPf/QeIN/93W8I6qB1r/74s3cftO/XDz/81Qa1Gr8M
uLjB4uoBO2d3uLi6w8nZFQ6OzqLOXeAs39k5u8GtfiO0aN9NwWvsAl9MW74a
8zduxfyAbdh64pw80B3IKDDkIi8vx7iKaqq67t27hypVqsDZ2RkODg46r1q1
Kt566y1069YNK1euxOrVq/HBBx+gcePG6N+/P8aPH4/p06fjxIkTOH36NHbv
3o1NmzZZsGHDBjHLVq1aZfuZuezn54cVK1bofKkgwOLFi7FI0MDX1xfe3t6Y
N28e5syZg6lTp2KmwOnEiRMxYcIE/Pnnn6hUqRKcBE5dXV3h6OiI48ePW/Wg
nU19cbKz/qWUU71xsqi8v6wakbrx/PnzcJPny8u0WCz497//jcmTJ2OdDHte
zsWLF3Hs2DFs27ZNz6dmzZpwcXHR4/fo0QMRERGqJnkM0/DkMuc8oyWCay1b
tkSLFi3QqlUrfP3113jppZfg4eGBWrVq4ZVXXkFycrJVxRuWi/n7jKxMAdVC
0UOlSMnNorkt2qxEB1uBmAlcpgnNZQKv9TsLN7ToN5X0NyXWqdhqi/P3XE+9
U1L6TJsWFBUiryBf+QCXZW5Re9zFsP1ltan0qEx5mia48UYbj6A+SuSUuZ6H
OHv9Bmb5LsYf3Xqi6+Bh6Dt+IvpMnIJ+E6diuIB2nRdehZ2TM+zlUTpVElvi
w48xc7kf/HbuxdFrd3Hx3lOcvxOoNsmuw2ew5+g5HJYBvGPvQWzatRc7Dh3B
riPH5LHuPnYClbF17wGs37ZTgHw9RkyYjAEjRuOn1n/Ca/FCJGemqxbmufPR
F4sIBwUF4dNPP9VhxOHER2hIwzt6nQ/l+wUybGf7rcKsFasxR7Sn19qNmLHa
HzPFCJmzTgxIOdYU+W7qMjEel67AZNGKE0XDcj51mZ8I30qdz/BbiQm+SzDO
ZxGmr/DT62/Zpi08a9SGxckNDs4eIshuol2dYefmIULuDjg5olbDF/H9L79h
3IyZmC7adqqXD7yW+mHO4uWYt8QP85atxOINmzDZa76ovIF6303yYFjQTv9p
dBvfW4eEpRx6mc/XRibsFbS4VFhcZNgqZaX/yTFqWRkCnzoHrjnxqBYbZyvH
jgybiX8dTCr1HCMrz5xMNmVXbp1pY/2v7RqVx0kPxclwEbAVO/Zj4daDmL/5
AOau36UYOUsowAyxaqeuDlCcnLxyPaatCJDdTlyyWnY01nsJhosKHenti6Fz
58myt+DjfIyYPQ+jBS+JfbPkiS9avxEb9h3E9mOnxaQ8LVi5D7NlD+7V6wBu
FfHPKNGPy1aLKhYlt2mnGK0BYoG74dT5y2rvECsLSvOf4wJWnLSOxreFPBlP
JkZAL6mgUEEwK6sEadmFiE/PQkpOvoInlwmeSSQE8jlJQDRNwDI1L1uVSEhs
jEjJfhl5f6P3kKEYLspuzKxZmOGzFEv8t2DvqUs4feMh7kckI0SA8anA4pOk
HERkFiMirRAhSbmITC3Eo/BkXLr6VEcuHC2wc7UTKXbGB599jTWbdyEtV409
5Mg4KCwrcrAOxBJZ9TQyGt+0+RNfdWiDr9u3QfN2fysyWvBDpw54DS27d8Uv
Pbrh157d8VvPXvipS1e07NYdv/boqZ9/79UbrXr3lUnQse8g/NVvsM7/6DMQ
HeSSOgwehO///ht1Xn9dcFwwXITJ3r2iKBpXIS7OcuvtYe9MQXNElTr18eGP
v2HoDHm8s4Xe+SzDnLWbsHCbMMaDp7DlxEV5rGf1MVFoSgsLjEuppYPt7t27
Nvgw0ZKfmzRpgn/++UehbuzYsarqCRuEGKr+N998E2vWrMG+fftw7tw5XL58
GZcuXcLhw4exa9cubNmyxYKAgAALNm7cKEJI6Fy7dq1O8juLrvDAMjHQiDBE
Th8fH8wX0jlbyCnnRMt//etfqFOnjqIVT+3/QkpDFl+3ySKFlwjJOVVillBI
EgIex97eXg0Ezlu3bq3IfejQIVWlT58+xaNHj/SS9u/fj2HDhuG1115T1cpb
QGQlCmdkZNj4E1Xx7du39Tp+/PFH/PHHH+jUqRPatm2riPnuu+/C3d1dkfeF
F14gjzHMdVeEhUdi8/YdGDl5Es7duoE127YIKuzBxp27sXbLNvhv3iposMNO
V9bAlj37sOPAIewiaMi0+/BR7BHwOHDiFI6cOYejZ8/jxIVLtvnVu/dx61Eg
bjx4hPtBIQgMDUVMQjxCIsIRnyyMKzGBc6HhmRmCkdn5eUhKS9VPyelpiIqL
RURUJGLj45CTl6tIqkrVGEBvGa4SEf1b9+6r8m7RtgM6Dh6O/pNmoP/02egl
ANFzynSMmbsQzhVrCzi4Kvl2kgH0zmdfwjdgC3afu4J7UYkITsjAk9hUXHsQ
glOX7+D4hZs4cf46Dpw8h11HT2LfybPYffIM9p29gIMXLgvbPY+dR05gvQAt
gWSqUIFvf/0dzT75AOeuX0FSRpqedLbY1vQv8kkNGDBATUH+Mx6Bu4LGo7BQ
LN2yBfMCNsm0BXPXbcYcsTZnyfLMDZsxY/0mTPXfgAl+a+wwXsh8JUwQvJwo
hH7SSn9MXrVWlldjyuq1GCc4OUZwc/Iqf0xZtAw9ho5A42bvwrVqLcFHEWE7
MX4d3C2wr1hVRnLleg3x4x9/Y+Kc+Vjov16U7krMWuyHBavW0zewJkC2mbdy
LXzkLBas2SBXulQBoYweWbn7jjb2bSCUm14PDYQ4ec7Xb9/ClWtXcfX6NVy6
fQPnb1zFhZvXcPHWdVy5e0uOcPXebXnwNx7ew+3Ah7ru1uMHcj+CERETjbSM
dGTn5igDNQ0p07YzjSfzM6XBtCPtjBPiarvn3AfGTX8BFy5cQIcOHdCnTx+d
evXqhYEDB2Lo0KEqojRquQ2NV2oVzqlhbty4gZs3b+r82rVrunz16lX9fOfO
HTx8+FDF9/Hjx3jy5AnCwsKU+6enp1MFWPQMPRR9TQcrz5fSHBMTo5a1aQNb
vR02p0Wt59kr3ethcouXbdktxGQ35ghznblGhstqsa3k4U0XO2umsNbpK9fp
fJZMU3z9MHHBMmWaYwR9xxKNZ83BKDHLx86dizEynzhvPuYsW46N+w/hoIjG
tcdhuBsai8siFofP30bAriMYPHwCGrzyNho0fR/z12zCxsNncfjqQ1y6GY7d
hy7htzZdERabrC6L3KI8MZdlKiqwPSYbe1W/p1jfpThz6y52iXQdPHMJ8fGZ
FqRlFgiQJaXmIDUjXyeuoR8vIycbaWLYxybFCT7mIjDkMXoPGoIe/QdhyLgJ
6jOcv3IVFm/ahP3nLuLUzTu4FxGLoJQMhMp+wrIKdR4t2Bwan4ng6DREJGQj
NjkfIVEZiIgtxO9/dxLLUfDNwx4Onm5o/PrbanMk5xQjW+yIrOLnMLlMMDks
Mg7ft2uLbzq2w3ed2qOFDK8fOnSUcdu8Q0cLWnTuIij0c9duAsQ98Ut3gnAf
C1r/088isNtfBsWffQegjVxD24FD0F4s/Q5DhuPvwYPRekB/dB4+Ar906YYq
DRujgnsl0R7uSl8tcBTrqCKq1a6PT774GgOGj8X4eWJB+67B3DVbsXzHYaw9
dBbbz9/EkfuhOC3TxfvBKJTbXia3vazIlImauHXrlmgHu+eQmLBDgkXZINn8
8ssvdZuKFSsqhBGpX375ZcVYysf9+/cRHh6upI5yQC58/fp1OU9SwepKBI8e
ParQtnevsI8dO7B161aiNTZv3qxz4b1Ke/mZ6E+U55wkl6A9fPhwZRx169b9
/yGuTWzE1YRKQnJqaiomTZqE2rVr266R10u437NnD4KDgxWuKYz03VEwKcfU
A7Qsevfuje+//155O8+L10jo5nWSeP/+++/45JNP8Ntvv6FNmzb4Wwypjh07
on379kqOee+qV6+u94/7Le+rvnf/Mbbt3odvWv6Ca4GB2HXqJLYcOoztR4+J
IbP/gGDwpgMHsfngIV299fAR7Dh2HHtPi+Scv4BDFy7iyKXLOH71Gi4IJl4L
fIIbT4NwLzwCockpYnom6zwsJRVxOblIzBezVnRRQlqKSFxOltzLlKwMZOTl
IKsgD+m52TrnN5xbkJmfK6M4ISVZ4TtPKG5haYn6D00ru6y0CAnxsWj9d3v8
2qmrwnGXMRPRfvg4tBs1AV2mzcI/onsGz1oAWCrCwd4Fdg72ImoiHX+2w5bD
p3AlKBKJeWXIlFFKt2VKdjES0vMRGZuGm4Ghooue4tT1uzh29Rb2XbiCI9du
4cCla9h75qIyiHV7DmL1jr3w8vPHhHkL0KZXV7z3xafYsHWz2hRFYv1npmeo
4cSnNld0Hw09UcvGZVRURn83JAQLAjZi+toNgsBbBF63YJZMc/y3YeaqzZgt
AkayM2XZekz0XY1Ji9Zg8mJ/GXxcaiB/V8n6lZiyZA0mLPTDuAXLMXreEkxe
tAKj53qjy4Bh+LVdF7zzwRd4/c0P8dZ7n+HtL5rj4+9/Rf+x04Q2bxJFFiC4
vAU+67ZixbZ92HDgBLYeO4dtx89j3YHjWCaXunTrTvjv3FMOl4tsfncTYYg4
hse9HvIEnekReRDyFP1GDkWr9n/jt7Z/oVXXDvi5/V9oKayidTcZsH17ovPA
Pug2pD96jxyCQRPHYLzXTCwJ8JdbfRy3njwUEpWhxChd1Hx2idzWonw9Fo/E
uaCZRSXQTjGQjhrDXWxgc/mooOlCpuxTr9CjYFEJrQ1PT0+1/ilXlDk6l6g3
qCuoM6hHDhw4oNY/fWc7d+7EwYMHdR11jal36FujnqNuouxlZmbqefGcLKod
PPR2cWSYPn2uDaXhKnqAQM0zp34o77T6D3AuLCpBeHwivDdsMWiyUORpy8RI
W7oWYzkalsjAXLoak1eswTS/teroGOezEKMEfEfO9cKY+UKPZVAOnj5VONVM
ocszMWa2lwCzH1Zs2oGjl27gVlAEniakIigxA7fD43HlSQS2n7iAdbsO4deO
vQDnqlgcsBdbjlzGvvP3cfxaCB5GZmHZhr24/jAM2cVl6pkoKxI7qrAIJSIU
BXn5jDGaGonxyQxREw1eewcvNf0IVeq+hDkLF+H2g0DEp2TYISWTnsD0nAIl
qanZmeoiotq4ef82ZnjNQs/B/ZVcMDq1WKhXwO69OHxRmEFgECKEaEfn5isw
xxWWITgtBxdFvPeLDXD4wjXcCApHpAB1SHIWQpOyEBieghUbNqKCq4MwUju4
V6mEF15pgqHjpgowFyKrqFS92PklBTC941SqIVFR+PrP1mjepR1+lKklfcjt
2uFn4UgtO6sfuUsXIUO/deuGP3r00KlVj174q28/Zcl/DhikQNx24CC0GzzQ
go5CkevI38EyDUKHoYPQbeQI9BwzGp/+/As8G74IB9HvFQWfags2ftZcKFnn
7hg8bgrm+60XS2wLFm8+iG1nbuLwzac4/0Ssq5BE3IxKxc2wBNyPTEB2QYnp
ZTIVKyWZZiZZIyG4QoUKKiKErldffVWZIpkkfaNkq+QZFBtu06hRIxUXmquE
NzLRlJQUjWIxFMXhbTJPMkmKCE1emsCnTp1S8aE4kWwTIiluhGeK6vbt2xWi
aQLwM0WSn8lUCXuEzXL5Bv9Fmi0qRC+paBFuKXIUP+6/WrVqNsLPa65cubLu
m+dG0eW2JqzzN4ze8dpoevNaKfL+/v7o2rWrsmFCMU2H119/XZn3r7/+qgyZ
PnFSAG5H9ty8eXOLHtxOkZqawgjE8a+b+nGv37yBwydP4l/ffYsDZ87g2JWr
ShFJC/ccP429J85g97FTco38VF0M2ws4Klh18soNnLt5F5fuCt158AA3BOUf
RYYjRFhCmJx6eHIiErKykSqCkVFYgDThxIzlcc7BnSUiSjd1oQbuktLSNaXG
cGubLmyGVhIE4knFUujJSstUFzdd14a1VF09YZev30CbLp3Rc9QodBkxGl3G
T0bvmV7oMmUuOk2egx5T54kKmi+WcCVYHB3g6OygWD1szBicu3YDUXKM7IJn
rnOLnl1t1RkJybSkk/EkIhp3RNgv3L6PSw8e4uzte6KKZORfuoqdJ07rfK1Y
PN7CXacs8MW/W/yCfzdvgc07diMxKQVZ2bkaD8+V6yel3LQpQCm/LddE/t4P
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
VVt6dhZOnz+HGnVqi7A7GVWDooXpgGQ010UMxio1amLsxEmISUjUYCOhl64z
Rp0ZfaY9Tkjm/L2PPtZSMrrF2bRk5lwv23bKsi12CvO/tGqtWeHchudD1/W2
XXsx12u+7R09vGYTs1lG/TA0Cv0Fr4fM9kHfiTPwV/c+6D12CgZMmYtBU+dg
/IIlmoV16OI19RyxD1sWGyYWF5udotGzdy/Fa8ZizfwPYjevlS7BXfv2Gi05
tE200YRTwMnT1m66WCldmZ403QgXr17TG6MdW0oL1ddINrBl3wFeiO1tHfI3
MDwSSzdslf0Sjj2xwN8fC9duNIqyNmzRDvgE6M2HjmPX8bNKjK8ImWbuWlBs
suZ0RyVnWDS9v55W4LFKb5lQm0Hjp6JTvyHoNWyM1ncxNZTc+9D5q2rfO3pW
hkeV6rbHZZHhKLYKqtZ/Ad7L/TRYyIr0p3EpiEjPURsgKilVH4vRn7tcHW2Z
3sG69etpht6xE8fVjc0RRdDknG1rci0ai3DRAmkj7b4E6zdtxF/t2moUQvvf
yC1v9PJLMAacE7r37KG9aZlcwN4CBw8fwplzZ8XQDGICeGGugFZ2QY4AR7Z+
0kQzEm05sJkUTvJOfzhNrwuXLupn8w1OxkW4KdQyFkb1QZbNLDLzbSOmKjK7
tRjd1pxt3jPzBSvlG4frS1T4hZt+pDaiCU/CTlrCdsssZGWmDgu6zVQZo/zF
TikCD2sEyg1PGSkIHXFWf+VzyF1JByV7/46fswAffN0C9m5V4eZaCS5O7vJw
xCizOGnba77qhzEV9tm9GxaOyPQMNgG0KGx74vi5KxgnVPzHVm3w7mffyRga
JvYdW4vEY/3W3ejUq48WRR0+cxrRKclaNJ9RWGBRG9XTaJtUVGI0YRAsJ0DS
SmXj+zU7dsKxclW4VKoluN1XcVuMC4wdN8kGeNr4X8yH/GI8Co3AlbuPcC8k
Si1F5piZznATssmwuc4ou85RSCd2My7FvuJp2WTgRO3ayMg08lWZY8rqcuau
xQuuB4p58FgU4qT5PrDzrKLeJb4jxL1yTXzxzY/419c/wN6jGlZs2KHpdE/j
0hGWIJxm0Qq8/8kH6Dugh+B2ujZgcLQGgsMF9PpPmqaxOk59xo1DnwkTMWja
dEz0WojpC5fB238TNh49g31X7+Lckwhci0jAg9h07WcemVWi5JmJYwxm0elB
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
EZItLKd07dNf+gwZJvmLlFJmNSwVXIaraU6ym3AZbMZTsVxwcJDdwQh6H4Vl
Awtjnpvo9G5lD3M7ME1Mi3SQuWKomL338ReOgunte5J4/pr2Pp++kOSv/3DK
bOSazdrK2Dfel/W796kchQ7jMxB90my6/ZeS5Ihxn3cePSF/7dwpq41R3pGY
qOH4N8b7+/Drr2XSlKkye+6vujGdjX5LIfoBeA7wa+QijI7QGjZ16oOXb8oh
87PzxHlZue0f6TPySWnerac8/tzLEpWvkBSvUEl9d26pRzcpfB82Yyup0JBR
wjsl12wNuk0U2xZs/t2CkBUrYc2S7CW3jfq19S7tmA5e+/d2qfQZb0QoWoJb
Ftv4OLjWBMIW96kCE+zycf8BznwQbR2oIdCf5a8yhPwggA1NhFFc/fv3V1+A
3cXf8SnKbvtf4BznbWgrQ2jNB+E/vwfZDoCxLdhsZGRHqWeTZgCFCefhjsEt
I61AqcuZ4O1UTUBn4sLN/+yRclVryEfGHbHxsu2C4bWNl0FkkJrXd+5kKDgH
OBQZpwDgnxPwg2Q3WMYS5/S2vv2xLDNgkIGIEhyoqFy3YQNvPoZFZcwOqPye
8QBb9BoovYePli079+mYTILEW26uNJODZQBOhkO94Tbi+ZEnQUKCigorj1Vi
Z6Gb4w1w+f2AhJ30QLqaOLlk6VJWWYumI7JvZMWr16yh/G5UIU4lXdBxjofM
5Z/07Wz5YMZ38szbbyv9LtgtLGiNHwUo83NF22VT5MjRk/LxZ5NNyNBeHqpU
VSpXryWDhz0un375jYbJADJRB/uU1JZqL0EBunrdp08S1NrwceCypdlc1ilE
Tm8WeAz9nLIzssx454tXrZFxL74gCeZ0chXIL2WqVJaHW7eSyPg4KVe9pqxc
t16Onj79b0yu5C1IrjUV6DMXzsul61e9ej65aPAULKYEYoXD+Hd/Jpj//BMt
p7ieGqE1GL7st+XStXs31WnlqhNH4hL16tdXVq/9Q2b//JO8/eH7MtLE0B9O
/kLm/7ZCth9MlNm/LpYBTz4txatUlxqPNJVWxjUiANPvuJVui9F2T7kyQg6W
Rmu2DM+cb7MNWji9QDLGAdkwWqawYRZzLe/FrnpnKcXelw2zz634klUktIO3
7PgeYJ8IAZ0H23/KtnUBObcb5vhlo7zEGq0QTH6CdA1Lgd49Opuy6SyVnFHm
uEoWLyVnTp3V1qtgtwCXCb9NCwrMxjTRGq1HOaLjJDq+qLTp3EdrpnWbttOJ
a4Rop5IuOaIklCLN0aAJhIB/yUpVpJbxWCo3biB1mj0i73z0gX/7EuU6do3V
CBw3cbw3sY+pH7rK0/DMr8pzL7+mbOUgd9xEoaKllBVN6RZedPOOnXVJE1Qb
99NnPoQuc/DXxsfExsrsdrXQiHN/NKBXvMxDisGE9aRbUGcgN1W4RDnZuTdR
rqfd1bIOJaRRzz5HJTDYpRBRUB779qfy+pffysYDxxx1llTXATbr4LQx12dv
OUKoVI/mmpvQqls3iS9eXB4bM0Y+/uYb+XXFKlWi6dZ3gLIy6fXQUDnZaaY0
+BvoZK4JuCOVF4JcFdl6xmMeuXhDPp/+o5StXlere9kjc0vOXAkSGpFLQsOj
tfLmmG7L367oBUusJ3CWLCKMByoJrF1/b9QyIIAQfo9OYCDETqzgOe/RqMUe
4DMt3loZAJuZtuJl/Du8L5q8dEhsVJSudfYVe4B+B/xQskZkpfhbgmz2YogL
VxwbcisQvm1zsyWHUIHiM/ls6NX4CBwvhHAg1PxOgF/S2x9x/YtQPtdM24lZ
KnDpghrlcyJtkmj0VgHmVqYf/jmnwNfTh0XiDY02kNhcdqesHOQBLjKQBUuW
kcEjRrgp6ZyqEWHDX0AW5o3tbbH/xmvrzTgiM9xTp2nFktr8mfe8p2Ry195a
+2vZ3XjdxjY7FiC7mm0yZgxCJChmQleVGtWtabalGyz2nsNHdTrFN/OXyCzz
c/zMJSVdMMSSj1B1yZvJcvbkMflnx051uCiNwPmzDa3+asv+1UBeO8mI3I6a
hvkdCuqMN27RqqWnMsojBHAbIOcvWEDpmjfMFdSRy9evyJ7jR2X2osU6aHPZ
n3/59V0Fy5XkG16AnKJryaz9W+mMq6CQZ+xRDnXpYXZjmdirZJqZb4S/TIra
5bVYHFZv36wbxeJbKZqecuYNZCoWk/U7e9MpJNOPPXX2jxKTkN8btlK+ciV5
8913pHrtWpp8ZKTtWyY+pnD+r8R1lBNLurXgpGtX5WzSRb3HlmXtUgy8GrLV
PHFx1tEXK+C5YBZ+LQmMLmpkyri4cXnjtcs6Pn8+lV3PnS+v6twRfJxIOi+7
jx2RoxfPy9ZDh+R9Y+RqNmspZerWl3odOkqrvn2k85Ahmp7XM/BS12Feicu/
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
NVEUPUuWLad4iztGkyLzotHyYZuz5Tdv264A+vXsmVKmuonvu3aUbv1634/B
wUrA2nn4kIY3MCrIRKVkGHuD+SimlN/nXnxRRYUwInC/2OwBrqQXpLYRI0Z4
EGxtpq0g2yXo1UGNaeMqwEWav+BXlYB+qEJ5KVf+IalTr64MGjJYNvy9Wc8W
LWE8EUx9phLvnJEaln+UxTvLqdt41769cvj0ObULKcr6SbsPg9k2mqpOdQgo
Pt2ogV5aWkvDKak+5VDn19Q0wTA7euM/O+Wjr76UYuYw85UoaXyuVtrKzDT6
YuUryriXX5W1O3ZK/eYtJSp3XomKzu2Nn0A5rXDJ4tJjQF/Zun+3XEi/KceT
zsuSNSv11O5m3vFvdfJPKFiQAFfpUgaNOXNbCmbdEOH4dDUV9hwcOphgWiPa
SUc4Uue0T5HJ7N6zh3alop9KPZ7YuF//gSRb5cDBRPlp7jypawA4P/uoeHGp
16qVPNypk+am2w0aKu0fGy69nhojfZ4eI/3Hjvk3GAcojQT7ktWkGKa7HgeX
Hg22J6DM3BsiYAQ/2GkAtvM3bP4g3bqWXWkLTXrDnZR1qFddsvpFeAEkuO2q
c8CXZwFehpD3/ke12F/YwIa/Fo9ZSNpFdu+eJ+fjULmR1QzwJsU5UgHcpHhd
PUx0hGVM01uPgYMkIGeEymohZxFtVs+QoSPk9PlLyo1Ciui9SR9p9d76Svi4
rKJsOUK0w7ZFx24y7IUX5ftfF3jjns3/j/gBMUIjoF5IaLBEx0bpatA9Y9Y5
9VhanD+d/LW079xNSj1URYY/9YzMXbxKZaN//X2DjH/7I2nTa6C07T1Ips9b
oiQroEvlvRAn8QNihn5c1h7kDJ1OAW2CPvyklGvG+dgrVWtXl/DonBqb6iN0
3ignUiBiOJR4xDmNfLqFd+8/JF0Gj5YXP5spQye8IWu27VEK2Y07TofZTZiS
SVelh1mwuczqgT1HZECEgImKNi5dvaYPy1ezZqr2C0RMCNSUkYl7LRL7FJtj
9NA57CRXndsfkRljR1PTnlPnZZbxlb78/gd56vnnZfQLL8gXs2bItv375Jwx
2Lfu3fURsgS74QALkKEWtNtZL9BfQZoVDkrTBswugEgIkZGWWQoqhH2WJO3k
oAO9TiY3/HXWdC7dJrbz2Op32WHQhOCEvCQpCaytfpfNlhNRgp2QqAlfdSpD
FhGQX2VvgtB2Ahb7hJAdn4Ejx/gDxdC6IO3S1FilShWvJ8sOdiZqpppJlG8+
J8TZwnxa5H15U/YTwyFp7MCLILaDFU3TIpkEkl6cko3SLRJnZN7TvpiPps2U
KXPmSsMWbeXipasOEud/AInTtfQDFXKWuaHLVq6SE2fOKkZgSUFYUHnfoYPS
Z0B/zRLWaVBfcy7UGiNjY+TDTyapzHuScZ7feOd9dZAp7rjtOj6F4RwKxFG5
csvf23eof/39grkKwq27d5bOvXs+CMQEY9sO7pcOQ4bKn1t2OoqVt276lLIR
Jlv/2SMduvbQxtMcSMPCtjFeaIgBYehV2FQ4bw41S5Po3LJcnvCKrW9jvMiv
bt25QxavWO7Nlfxt5QrNlWItbru5AovAXBU3EHbyfY4B5j7c83zQyrqD/9q0
Ubbs3qcp5hSNazLuA2Gn/9MEw9dvKc7atLMLvt57ttuY+tTeI8dkxo9zpHLd
Ok55C9tojEf5mrWNT15OZR8i8uaTboOHqG7yrLnztRukXaeuKorSqUtnGT1u
rMxdtEBj33Xb/5aPZ06RJyc+K5Xr1NRTVRS+Y3uzAjwYdphLvCqrl44U6DnI
1JeTvFyAjYbthOATZ07Lz/PnSat2baV46VJSuXo1LVKXNLDLcUBH5/Kv/H2N
fPTpJzL7JxM7rv9Ldm37R5YtWS4Txz8vJUqU0sSpWs7soZJQsqQ80qmztDWx
cNv+g6Xj0OHSY9RTBopHS78xT/9XTAwMM9IW59V6E2wxrAOTdpjphjYHSSt6
mwgLCGPR7cAyoOkB/QBKJc67Pw3TLyYO8JfidF8FeoNoXBKIJX9ZY8ivuiic
x82O+aOw+VHhUyfnUNwjSSgqg9LpGRoGp7iOtHWEcKA/mPSxdOvbX7Mji1b/
rvadvvTfN2+R6T/MkeW/rZbjp502c1YZSh8lK1YwK8u52DG5YEqQ2wvQdC3V
UOSdC5QsL68a2PSQ15Gvw7aCvNoVEWJ+cgRLUFQOkbAgGfrkSONUJykJmxYj
kBcPlELTyQtXtVB62DxWqt/UOAZ5pO2jA+Xdz6YaN7KD5C9TWaZ+/7N2S125
kWrQ22yotDsOjN1SYrdPJUUizEtjtMy937j7H+OJPi/la1WT4uXLOopjELnN
meB3GIdC7UeRkmU4FC//jDSXMS/Fq9eTce9/Js0eHSCfzPxREs03w5pOTb8n
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
UWN444sUVuUgOGlRBoEJxlBpvWN7y/03tjqxuJDhXknwm2++0djYKl3zH5lw
HFvkKgFYFc3yepWdONvmsm12nf1C2chm0mFkFSxYUPeXVQcgqQXAUTenJt27
d299tJ0NCxYsAIidJH4xxWREtMBp1DwI2elYQpyT5yTpwWh/JSwOBX8AR8TO
Uy9evLh+BadChGzbIzVn7tLjOHVo2fyOJZVwqKQB8BV8aPKafY75QOAEDqgT
iQd5uTQmzOGn8PfWJC1dsVoeqlNfxr3+jnxqnMX9h44prYDla/EaPQ+69Xzq
aYdqLKyOssuxrlq9mqxcvUpxCiymQdinpJF4Nbna32vMKMxmYlqVmcAhNni4
zyzxKdNnyeQp0+SrqdP0cyiLgtW/zJurqor4CCzRoiaeHz3xealslpdW5DLd
jH4utbT7T52SYc9OkNDwWAOjTogfHBIm+YuUkGk/zpHvFy+Rfw4fdUicUElu
palvjobHHbL/aenaxZeertlOUqK8xT8TCJ44d0Y/UjsfuCUOCR9FEWYuLFm2
VLujKCUTQ5K8BqitZpUdp3TDBLO0rdjco8d5rqSjr4c9OU5eNM47uT0dxJuS
6sbVN7X5grHYNQzsQH6LiUtQEkuZCpWldPlKJl6uqI0SxStWlvV798oRAycM
fGeSzlMTnpenn39RJrz+prz3+WRZtnadbunjxl/Zc/KMbNizX34wZuP1Tz6X
4eYiDh09RroPGKTqhbWbNJUyVatLaGxuCTDbRKLDJKZggkTG5/aPr2079v8P
qZ02qYLKUKIA+sdf67S9jgsMcnfs2sW4VvkVaWlXKVKqhNL1/9y2WfYcS5Rp
c3+URu1baaWybO1qUrtFE6nV/GEpWq60ZsoDc+ZQ+hE8YZ77jBtVunIlg+qd
pG2fPj5tpgqW7o+PlEefGCUDxozxB2pLo+eI6WIi80XGi0dYnZYByrZiU+MA
Y1PYxA7uRHljTtiw6NzC1rTD5i0P1nai/EsJRPPVmZnOiOfsnnNtHW/8BUCZ
kviDwJz7Psq8Da//Z1htVmOLjh2kWv16sufQIfUDHUJKht6n8S88r1vbp23C
8aokHRaVR5q376RTjEASdHKGPzdOarVubq7to9J1yEBp06uHdDOPPYcMkgHG
4dOxycikBId49BwyHyGhUMRCDWIMMfd2tz+H+9AJA86If+cxuz6vuZ15Isw5
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
i+jlORe1r6bfUzI1p2w+yyfXUlkogDeADoC//M7bJjCN1/J7y3Yd5dz5i/4p
cAA8Mi6vFCr7kBSrUEXKVatrLnIfefHdL+SXpX/I8Ys35IY520tmQQHitIVR
Ymfq0Nxfl8iXU2bJihWr1H9MTr1uzDPTM5Ik8cJFmTF/obzy8afSw1zgjuYG
MtYRMt9A45sOfOZZ6TdmrPR/Zqz0Me/1feYZA+AjpNOIsdL18WekVe+hxidu
JdEFS0qeIqUkV6kSklC6jNYX6VG3AB7kpsDtgiNDhGPKYqdeC00b4ARtQCS7
WG1q1y7oLCmAvP+Ktvl3HAKyUDgICIfASKMdm25HHGTS3ZZ/xSPADgDDJaNM
BcpyjbI4557GV0VFbkJsiGAgN4jNBicGttKaPAfZ+VCIXcTFz5iLxklC47Y6
YVY2gTQZeW52tx2SRYzMwVkfGeNBeI8bwIFiJWwe3boBLjx7XrytF3z00Uf6
frC7JRYvXaJMzOw5Q5UgTPr12MUr2n8BdlMDoaHgwJETKvQ0a9YM+eabrxWr
r1274syC9BsvZJUF3373HXl81EgZNmK4BpoNGzfSpiaACyFqkAVgIxCzf0sL
Nm2bETHRPu2bDXHkdyKjpXWXntKwTScJiM6l884yvHkFpc3/0+X42ZMG0idI
jljjhwdHSETeAvLooJGyZe9RHbzEtAdUM6EjoysMXyyT+Rik+A2S4OAePnvG
+Pen9ZF+xhV/rZevvp0lU3/4Xn5cME+OnD2lv8s6tt3MnALqlWS/yTU4p5Km
GuRoY+WOy+NzMgdOw7Y5c7rW6BSrWrNGlsZnmKLGNzNmagaPqPul199WkozV
FSPwSTx2XBo3hZEg2Yzz5Mg2BfikctUqMtMcKSw2q74yd9lvMmfVHwaCtxgI
/lsWGihevGm3+flH5pjIef46Ewpu2SOL1v8ji//6x4RnSzfsNntp0bqdsmDt
dvP+blmw7h+fzF+7w9imn1dvkV/WbJXZi1bJbBO4LFq11utv8hRBsntpI5vZ
1WWYpZXt1KiDnNmEa1Zo91XVerWNzW9vTqptt85SUOo2e1ip/5Xr1VJZ19pN
G0v9Ns2larNGCtb1TJhd14TZdUzIDVzX7tBCYbpht3bSqHt7adyjgz4+0rOL
tO3fW1r27iGdhw6Wdv37S1eo8iNHSe+nnpSBZjcC1/f8C9QJegawPOB84Hqz
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
yVvrN9SaLkOk9hJTuRzKPV8LG5P3OPOy6HS/JdZd6ed9AV+a06VQ0r8CSomZ
rTDtz0X2Vy4JjyqVULZWbXz140JETpshkH0LVx/8hYt3H+C6iM7PAtdnr9/E
L3881Hws7rsnkE6L5Df2RZft2yJOvz6ymp6T64u4rPQupC57bK31s+x/lGN1
nz594bLWjbJI25T1V6jojbPnLjgTXUVjOHX6AkqUqYyyNZ5D1ZfErG4miBEy
HNMWrcPcVdsweuoc7BBZfCDK7+8yH9/NLhDzWiT9cSEyL93Cxp1pGCoQ3Dsi
EmHREzDy2+kYJRr62Jk/YuR3c5WglOtRMdbn8G9mIWLqTAyfMhMRk2N0Hf7V
DAyN/lZpWEJGj0JoVJQYZsGaIKttWct5KZUT/XxUpBjFLGlLNIcJJ0qOTNNm
kcBND69D3UseCl8EbiIzYYnbBHQa4Q61I3wVywnszEXj90Rv5qxxzXMbtDWJ
Z6Y3h2EL5bm++eYbNXWZVEZ3O2NOvB6D0Ab9tXDCsuM43gnUdHrT2c2MFAoL
jWpmEZmG7XaCmFVrWUrrMln0PG7cOCUEJyUww87M26b/mqe0fGLef+NB5ZXS
NcC/o8FN7d6EsF0rMozH6/8AteHnd2UbdLMBm8yzGVln8Pq/38e/3m2Kpu06
Y56g3LItSfg+dj0WxG3G/LXx+CE2DpETp6CXGB2RMmhYckjvGKEt256iHWpb
+yrX9ZCwUCtZTBamqHGtVrzdLJl1X1fv/KL9F++IQjd70Xw0atkMNV+ojw/l
Gmo910DgxkuAuRo+7NQDCQIPiYfP48OgwajxahO06vipPcU+NbLB2CkTnacu
XIHoecswc3kcNu9K0dauypWdY/WaoTM5/chhtZfMm2AUneXS2qKLoRX2umIl
ArU9ecI3ZDxdEwv83M3rOHruDI7JmNt58JBSF9Vt8CpeffMtrYXW/gWmc3Y+
m7M/xAIxXsqUK62YTVoYQ4xJC5utIug6twZXDQutY9eijLc/eoWOwKodyUi5
cAkX7z/EPXlVd5je8ihX02hOXrqGrdt3YfioMejeqw/eevsd1QiVMsiNFQRi
jZTxQcDHAxEvCLtO0Do+9QS2HjyFn9LPYmOKWNiCxNsOndHPbtiafsahkF1G
oZpmuCtkr5eTxO07iZX7zuiJ1u3ajyeFdr6ZaaOIOnoT2v6ZfQ35QLOt3qMk
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\
\>"], "Graphics",
 Evaluatable->False,
 ImageSize->{570, 51.9375},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"From In[184]:="],

Cell["Figure 10. Representatives of dice category", "Caption",
 TextAlignment->Center],

Cell[TextData[{
 "The feature extraction of these pictures  represented by  matrices of 128 \
\[Times] 128 pixels,  was carried out by wavelet transform using second order \
Daubechies filter [6], then employing averaging technique [ 7] for seven \
nonoverlapping bands of the spectrum. Consequently the dimension of these \
feature vectors is seven,  ",
 StyleBox["n",
  FontSlant->"Italic"],
 " = 7.\nThe feature vectors of  snowmen, from left to right,"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh1", "=", 
   RowBox[{"{", 
    RowBox[{
    "17.987862406345197`", ",", "15.339852345251783`", ",", 
     "13.405059986913816`", ",", "11.39844147326539`", ",", 
     "9.147096417803048`", ",", "7.033082666195232`", ",", 
     "4.798303619676565`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[10]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh2", "=", 
   RowBox[{"{", 
    RowBox[{
    "17.766474068532943`", ",", "15.353169727671743`", ",", 
     "13.583147305884832`", ",", "11.442932257229275`", ",", 
     "9.491679304635152`", ",", "7.326023584142842`", ",", 
     "5.161496090621752`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[11]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh3", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.103411342767437`", ",", "15.371635513578214`", ",", 
     "13.202523449937722`", ",", "11.062797391406976`", ",", 
     "9.368963494909677`", ",", "7.057866279976232`", ",", 
     "5.077124049177121`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[12]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh4", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.1709394935011`", ",", "15.315294077374773`", ",", "13.6041114027883`",
      ",", "11.4958063381276`", ",", "9.579804299143635`", ",", 
     "7.345586733409343`", ",", "5.141453727483033`"}], "}"}]}], 
  ";"}]], "Input",
 CellLabel->"In[13]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh5", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.348408722947845`", ",", "15.600433067236114`", ",", 
     "13.45926587596142`", ",", "11.298982304250389`", ",", 
     "9.234589734745336`", ",", "6.935839853987073`", ",", 
     "4.6874515141320625`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[14]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh6", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.55417730221509`", ",", "15.405886197703628`", ",", 
     "12.994549889958655`", ",", "11.108367738308896`", ",", 
     "9.292707430500966`", ",", "6.919296621727446`", ",", 
     "4.511708592363226`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[15]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh7", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.314635037628157`", ",", "15.438902136555589`", ",", 
     "13.772985606947227`", ",", "11.077006077418556`", ",", 
     "9.39215624869045`", ",", "7.088943106162201`", ",", 
     "4.740247276938691`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[16]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh8", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.422579068846456`", ",", "15.44269453449702`", ",", 
     "13.513840962700638`", ",", "11.428495120182927`", ",", 
     "9.148425413113836`", ",", "7.046848261278439`", ",", 
     "4.694119093310168`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[18]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh9", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.43513010369331`", ",", "15.454169597007873`", ",", 
     "13.708644791672018`", ",", "10.940891580889742`", ",", 
     "9.209006556341908`", ",", "6.843915401182678`", ",", 
     "4.034620107512246`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[20]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvh10", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.436640348880456`", ",", "15.34733995320342`", ",", 
     "13.609786709283107`", ",", "11.450781255719415`", ",", 
     "8.952378078329414`", ",", "6.624937026635307`", ",", 
     "3.713739193450354`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[21]:="],

Cell["The feature vectors of dices, from left to right,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk1", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.513206366376362`", ",", "14.449874299970174`", ",", 
     "13.544739232822373`", ",", "12.40092757444905`", ",", 
     "10.189337384845338`", ",", "7.3292375831297685`", ",", 
     "4.736174157402171`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[22]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk2", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.50419064824187`", ",", "14.501955683529022`", ",", 
     "13.897585347039538`", ",", "12.315411421576888`", ",", 
     "10.380098171932897`", ",", "7.680862954130695`", ",", 
     "5.113633812677783`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[23]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk3", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.35998649741921`", ",", "14.325007487010204`", ",", 
     "13.891109482798795`", ",", "12.041493245625402`", ",", 
     "10.245624068294767`", ",", "7.635283116835789`", ",", 
     "4.892220409840139`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[24]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk4", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.74725921957245`", ",", "14.481206026532117`", ",", 
     "13.586894883522623`", ",", "12.159670019275667`", ",", 
     "9.7073431909908`", ",", "7.113947248457536`", ",", 
     "4.320217058606431`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[25]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk5", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.578001547534335`", ",", "13.56106484453565`", ",", 
     "13.939818234922745`", ",", "12.275461106255154`", ",", 
     "10.339064713550757`", ",", "7.645968182660811`", ",", 
     "5.0034125687198125`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[26]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk6", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.734938375431323`", ",", "13.426310886783215`", ",", 
     "13.848149559149393`", ",", "12.51036473995895`", ",", 
     "10.038140671950991`", ",", "7.478539842000284`", ",", 
     "4.364368004657445`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[27]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk7", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.704207897344432`", ",", "14.1043321595848`", ",", 
     "13.816500082559502`", ",", "12.186540780365704`", ",", 
     "10.09035041547276`", ",", "7.3090549357115`", ",", 
     "4.517843532536042`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[28]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk8", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.62102884531058`", ",", "13.85093633669147`", ",", 
     "13.564163871814355`", ",", "12.054010558850377`", ",", 
     "9.881985429568406`", ",", "7.000473177572209`", ",", 
     "4.252312638574372`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[29]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk9", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.665170732704688`", ",", "14.811226132783473`", ",", 
     "13.902084134865797`", ",", "11.924150150415487`", ",", 
     "9.892352518265293`", ",", "6.741462829622055`", ",", 
     "4.235952266871399`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[30]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"fvk10", "=", 
   RowBox[{"{", 
    RowBox[{
    "18.83160012850086`", ",", "14.559912101933348`", ",", 
     "13.518379854185252`", ",", "12.281168961677198`", ",", 
     "9.892557265288342`", ",", "7.087886591871221`", ",", 
     "4.344411525543565`"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[32]:="],

Cell["\<\
The first 7 -7 pictures are considered as teaching set and the last 3 -3 \
pictures are considered as test samples.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xym", "=", 
   RowBox[{"{", 
    RowBox[{
    "fvh1", ",", "fvh2", ",", "fvh3", ",", "fvh4", ",", "fvh5", ",", "fvh6", 
     ",", "fvh7", ",", "fvk1", ",", "fvk2", ",", "fvk3", ",", "fvk4", ",", 
     "fvk5", ",", "fvk6", ",", "fvk7"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[33]:="],

Cell["\<\
Let us labeling the snowmen category with  +1  and the dice category with   - \
1.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zm", "=", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[34]:="],

Cell["Employing wavelet kernel with parameters", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", "=", "7"}], ";", 
  RowBox[{"a", "=", "2."}], ";"}]], "Input",
 CellLabel->"In[64]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"K", "[", 
   RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
  RowBox[{
   UnderoverscriptBox["\[Product]", 
    RowBox[{"i", "=", "1"}], "n"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"1.75", " ", 
       FractionBox[
        RowBox[{
         RowBox[{"u", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "-", 
         RowBox[{"v", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "a"]}], "]"}], " ", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{" ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"u", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "-", 
            RowBox[{"v", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "2"]}], 
        RowBox[{"2", " ", 
         SuperscriptBox["a", "2"]}]]}], "]"}]}], ")"}]}]}]], "Input",
 CellLabel->"In[65]:="],

Cell["and ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", "150"}], ";"}]], "Input",
 CellLabel->"In[66]:="],

Cell["The classification function is", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "=", 
   RowBox[{"SupportVectorClassifier", "[", 
    RowBox[{"xym", ",", "zm", ",", "K", ",", "c"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[67]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"F", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", "20"}], "]"}]], "Input",
 CellLabel->"In[68]:="],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"-", "0.08930230636144099`"}], "+", 
   RowBox[{"0.`", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.125`"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "17.766474068532943`"}], "+", 
          SubscriptBox["x", "1"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "15.353169727671743`"}], "+", 
          SubscriptBox["x", "2"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "13.583147305884832`"}], "+", 
          SubscriptBox["x", "3"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "11.442932257229275`"}], "+", 
          SubscriptBox["x", "4"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "9.491679304635152`"}], "+", 
          SubscriptBox["x", "5"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "7.326023584142842`"}], "+", 
          SubscriptBox["x", "6"]}], ")"}], "2"]}], "-", 
      RowBox[{"0.125`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "5.161496090621752`"}], "+", 
          SubscriptBox["x", "7"]}], ")"}], "2"]}]}]], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "17.766474068532943`"}], "+", 
        SubscriptBox["x", "1"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "15.353169727671743`"}], "+", 
        SubscriptBox["x", "2"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "13.583147305884832`"}], "+", 
        SubscriptBox["x", "3"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "11.442932257229275`"}], "+", 
        SubscriptBox["x", "4"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "9.491679304635152`"}], "+", 
        SubscriptBox["x", "5"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "7.326023584142842`"}], "+", 
        SubscriptBox["x", "6"]}], ")"}]}], "]"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"0.875`", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "5.161496090621752`"}], "+", 
        SubscriptBox["x", "7"]}], ")"}]}], "]"}]}], "+", 
   RowBox[{"\[LeftSkeleton]", "17", "\[RightSkeleton]"}]}],
  Short[#, 20]& ]], "Output",
 CellLabel->"Out[68]//Short="]
}, Open  ]],

Cell["Defining the decision rule we get,", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PictureClassifier", "[", "u_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Sign", "[", 
    RowBox[{"F", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["x", "1"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "2"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "3"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "4"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "5"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "6"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "6", "\[RightDoubleBracket]"}]}], 
     ",", 
     RowBox[{
      SubscriptBox["x", "7"], "\[Rule]", 
      RowBox[{"u", "\[LeftDoubleBracket]", "7", "\[RightDoubleBracket]"}]}]}],
     "}"}]}]}]], "Input",
 CellLabel->"In[69]:="],

Cell["Let us classify the test samples", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"PictureClassifier", "[", "#", "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "fvh8", ",", "fvh9", ",", "fvh10", ",", "fvk8", ",", "fvk9", ",", 
     "fvk10"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[70]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellLabel->"Out[70]="]
}, Open  ]],

Cell["The classification is correct for every test picture.", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section"],

Cell[TextData[{
 "\n",
 "1. Berthold M. and Hand D.J. (Eds.) \"Intelligent Data Analysis, An \
Introduction\", Springer, 2003.\n \n2. Hearst M. A. ",
 StyleBox["Support Vector Machines,",
  FontSlant->"Italic"],
 " IEEE Intelligent Systems, pp. 18 -28, July/August, 1998.\n\n3. Cristianini \
N. and Shawe-Taylor J. \"An introduction to Support Vector Machines and other \
kernel - based learning methods\", Cambridge, University Press, 2003.",
 "\n\n4.Juill\[EAcute] H.,Pollack J.B. ",
 StyleBox["Co-evolving intertwined spirals",
  FontSlant->"Italic"],
 ", in Proc. of the 5th. Ann.Conf. on Evolutionary Programming, San Diego, \
USA, pp.461-468, 1996.\n\n5. ",
 "Zhang L, Zhou W. and Jiao L. ",
 StyleBox["Wavelet Support Vector Machine",
  FontSlant->"Italic"],
 ", IEEE Trans. Systems, Man and Cybernetics - Part B: Cybernetics, Vol. 4. \
No.1. pp. 34 -39, Febr. 2004  ",
 "\n\n6. Wavelet Explorer with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Application Package, Wolfram Research Inc. 2003.\n\n7. Goswani J.C. and \
Chan A.K. \"Fundamentals of wavelets\", J.Wiley, 1999."
}], "Reference"]
}, Closed]]
}, Open  ]]
},
WindowSize->{760, 520},
WindowMargins->{{60, Automatic}, {Automatic, 0}},
DockedCells->FEPrivate`FrontEndResource[
 "FEExpressions", "CompatibilityToolbarPostScan"],
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
Magnification->1,
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (November 7, 2010)",
StyleDefinitions->"Textbook.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "compatibility-yes"->{
  Cell[57263, 1988, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57561, 1998, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57714, 2004, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[58170, 2020, 105, 2, 17, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[58278, 2024, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[59476, 2062, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[59794, 2072, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60292, 2085, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60826, 2102, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[61690, 2126, 113, 2, 29, "Input",
   CellTags->{"S5.37.1", "compatibility-yes"}],
  Cell[61806, 2130, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62124, 2140, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62622, 2153, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[64205, 2202, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[65069, 2226, 1183, 35, 118, "Input",
   CellTags->"compatibility-yes"],
  Cell[66255, 2263, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66546, 2272, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66771, 2279, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[67332, 2298, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[68140, 2322, 271, 9, 29, "Input",
   CellTags->"compatibility-yes"],
  Cell[71481, 2402, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[71734, 2410, 186, 4, 27, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[71923, 2416, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[72628, 2439, 572, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[73225, 2457, 459, 14, 29, "Input",
   CellTags->"compatibility-yes"],
  Cell[89871, 2927, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[90124, 2935, 266, 6, 28, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[90393, 2943, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[91190, 2970, 554, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[91747, 2986, 523, 17, 52, "Input",
   CellTags->"compatibility-yes"],
  Cell[92510, 3015, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[92763, 3023, 296, 7, 28, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[93062, 3032, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[94325, 3074, 548, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[94876, 3090, 1071, 34, 74, "Input",
   CellTags->"compatibility-yes"],
  Cell[97105, 3170, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97423, 3180, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97921, 3193, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[99122, 3229, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[99986, 3253, 294, 6, 72, "Input",
   CellTags->{"S5.37.1", "compatibility-yes"}],
  Cell[101338, 3308, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101636, 3318, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101789, 3324, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[102245, 3340, 105, 2, 17, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[102353, 3344, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[103657, 3387, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[103910, 3395, 400, 10, 48, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[104313, 3407, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[104987, 3430, 497, 13, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[105509, 3447, 429, 14, 52, "Input",
   CellTags->"compatibility-yes"],
  Cell[112956, 3660, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113247, 3669, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113472, 3676, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[114067, 3696, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[114875, 3720, 305, 10, 29, "Input",
   CellTags->"compatibility-yes"],
  Cell[120202, 3907, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120493, 3916, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120718, 3923, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[121287, 3942, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[122095, 3966, 279, 9, 29, "Input",
   CellTags->"compatibility-yes"],
  Cell[128674, 4122, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[128927, 4130, 400, 10, 48, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[129330, 4142, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[129894, 4161, 497, 13, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[130416, 4178, 315, 10, 29, "Input",
   CellTags->"compatibility-yes"]},
 "compatibility-no"->{
  Cell[57263, 1988, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57561, 1998, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57714, 2004, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[58170, 2020, 105, 2, 17, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[58278, 2024, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[59476, 2062, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[59794, 2072, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60292, 2085, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60616, 2095, 207, 5, 28, "CompatibilityInput",
   CellTags->{"S5.37.1", "compatibility-no"}],
  Cell[60826, 2102, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[61806, 2130, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62124, 2140, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62622, 2153, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62946, 2163, 1256, 37, 117, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[64205, 2202, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[66255, 2263, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66546, 2272, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66771, 2279, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[67068, 2288, 261, 8, 28, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[67332, 2298, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[71481, 2402, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[71734, 2410, 186, 4, 27, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[71923, 2416, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[72182, 2424, 443, 13, 28, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[72628, 2439, 572, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[89871, 2927, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[90124, 2935, 266, 6, 28, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[90393, 2943, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[90652, 2951, 535, 17, 51, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[91190, 2970, 554, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[92510, 3015, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[92763, 3023, 296, 7, 28, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[93062, 3032, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[93321, 3040, 1001, 32, 73, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[94325, 3074, 548, 14, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[97105, 3170, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97423, 3180, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97921, 3193, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[98245, 3203, 874, 24, 95, "CompatibilityInput",
   CellTags->{"S5.37.1", "compatibility-no"}],
  Cell[99122, 3229, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[101338, 3308, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101636, 3318, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101789, 3324, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[102245, 3340, 105, 2, 17, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[102353, 3344, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[103657, 3387, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[103910, 3395, 400, 10, 48, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[104313, 3407, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[104572, 3415, 412, 13, 51, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[104987, 3430, 497, 13, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[112956, 3660, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113247, 3669, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113472, 3676, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113769, 3685, 295, 9, 28, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[114067, 3696, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120202, 3907, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120493, 3916, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120718, 3923, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[121015, 3932, 269, 8, 28, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[121287, 3942, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[128674, 4122, 250, 6, 33, "CompatibilityTextTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[128927, 4130, 400, 10, 48, "CompatibilityText",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[129330, 4142, 256, 6, 29, "CompatibilityInputTop",
   CellTags->{"compatibility-yes", "compatibility-no"}],
  Cell[129589, 4150, 302, 9, 28, "CompatibilityInput",
   CellTags->"compatibility-no"],
  Cell[129894, 4161, 497, 13, 44, "CompatibilityControls",
   CellTags->{"compatibility-yes", "compatibility-no"}]},
 "compatibilitytag-nosugg-plotpoints"->{
  Cell[57263, 1988, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57561, 1998, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[57714, 2004, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[58278, 2024, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101338, 3308, 295, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101636, 3318, 150, 4, 17, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[101789, 3324, 453, 14, 47, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}],
  Cell[102353, 3344, 558, 15, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-nosugg-plotpoints"}]},
 "S5.34.1"->{
  Cell[58839, 2041, 230, 6, 72, "Input",
   CellTags->"S5.34.1"],
  Cell[100966, 3293, 369, 13, 51, "Input",
   CellTags->"S5.34.1"],
  Cell[119801, 3891, 398, 14, 51, "Input",
   CellTags->"S5.34.1"]},
 "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"->{
  Cell[59476, 2062, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[59794, 2072, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60292, 2085, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[60826, 2102, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[61806, 2130, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62124, 2140, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[62622, 2153, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[64205, 2202, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97105, 3170, 315, 8, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97423, 3180, 495, 11, 48, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[97921, 3193, 321, 8, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
  Cell[99122, 3229, 861, 22, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}]},
 "S5.37.1"->{
  Cell[60616, 2095, 207, 5, 28, "CompatibilityInput",
   CellTags->{"S5.37.1", "compatibility-no"}],
  Cell[61690, 2126, 113, 2, 29, "Input",
   CellTags->{"S5.37.1", "compatibility-yes"}],
  Cell[98245, 3203, 874, 24, 95, "CompatibilityInput",
   CellTags->{"S5.37.1", "compatibility-no"}],
  Cell[99986, 3253, 294, 6, 72, "Input",
   CellTags->{"S5.37.1", "compatibility-yes"}]},
 "compatibilitytag-semicolon-Show"->{
  Cell[66255, 2263, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66546, 2272, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[66771, 2279, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[67332, 2298, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[112956, 3660, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113247, 3669, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[113472, 3676, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[114067, 3696, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120202, 3907, 288, 7, 33, "CompatibilityTextTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120493, 3916, 222, 5, 27, "CompatibilityText",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[120718, 3923, 294, 7, 29, "CompatibilityInputTop",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}],
  Cell[121287, 3942, 783, 20, 67, "CompatibilityControls",
   CellTags->{
    "compatibility-yes", "compatibility-no", 
     "compatibilitytag-semicolon-Show"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"compatibility-yes", 380889, 8594},
 {"compatibility-no", 389677, 8789},
 {"compatibilitytag-nosugg-plotpoints", 398614, 8984},
 {"S5.34.1", 399923, 9017},
 {"compatibilitytag-oldpackage-Graphics`MultipleListPlot`", 400187, 9024},
 {"S5.37.1", 402389, 9073},
 {"compatibilitytag-semicolon-Show", 402809, 9082}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 161, 6, 27, "OnlineHeader"],
Cell[CellGroupData[{
Cell[743, 30, 213, 7, 57, "Title"],
Cell[959, 39, 263, 10, 151, "Author"],
Cell[CellGroupData[{
Cell[1247, 53, 27, 0, 83, "Section"],
Cell[1277, 55, 645, 13, 97, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1959, 73, 163, 7, 85, "Section"],
Cell[2125, 82, 774, 11, 91, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[2936, 98, 432, 17, 53, "Section"],
Cell[CellGroupData[{
Cell[3393, 119, 47, 0, 38, "Subsection"],
Cell[3443, 121, 768, 29, 43, "Text"],
Cell[4214, 152, 752, 28, 25, "Text"],
Cell[4969, 182, 1742, 58, 221, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6748, 245, 55, 0, 38, "Subsection"],
Cell[6806, 247, 191, 4, 43, "Text"],
Cell[7000, 253, 710, 27, 25, "Text"],
Cell[7713, 282, 51, 0, 25, "Text"],
Cell[7767, 284, 282, 14, 25, "Text"],
Cell[8052, 300, 365, 6, 61, "Text"],
Cell[8420, 308, 4783, 81, 325, "Graphics",
 Evaluatable->False],
Cell[13206, 391, 2154, 82, 68, "Caption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15397, 478, 52, 0, 38, "Subsection"],
Cell[15452, 480, 208, 8, 25, "Text"],
Cell[15663, 490, 67, 0, 25, "Text"],
Cell[15733, 492, 622, 24, 25, "Text"],
Cell[16358, 518, 282, 11, 77, "Text"],
Cell[16643, 531, 1009, 35, 71, "Text"],
Cell[17655, 568, 74, 0, 25, "Text"],
Cell[17732, 570, 510, 18, 25, "Text"],
Cell[18245, 590, 534, 19, 25, "Text"],
Cell[18782, 611, 20, 0, 25, "Text"],
Cell[18805, 613, 473, 21, 25, "Text"],
Cell[19281, 636, 25, 0, 25, "Text"],
Cell[19309, 638, 757, 29, 35, "Text"],
Cell[20069, 669, 39, 0, 25, "Text"],
Cell[20111, 671, 318, 10, 46, "Text"],
Cell[20432, 683, 614, 14, 105, "Text"],
Cell[21049, 699, 338, 13, 56, "Text"],
Cell[21390, 714, 60, 0, 25, "Text"],
Cell[21453, 716, 772, 28, 57, "Text"],
Cell[22228, 746, 124, 3, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22389, 754, 52, 0, 38, "Subsection"],
Cell[22444, 756, 223, 6, 43, "Text"],
Cell[22670, 764, 325, 13, 25, "Text"],
Cell[22998, 779, 174, 5, 51, "Text"],
Cell[23175, 786, 425, 22, 51, "Text"],
Cell[23603, 810, 4236, 73, 237, "Graphics",
 Evaluatable->False],
Cell[27842, 885, 475, 9, 44, "Caption"],
Cell[28320, 896, 307, 7, 69, "Text"],
Cell[28630, 905, 409, 15, 28, "Text"],
Cell[29042, 922, 626, 27, 45, "Text"],
Cell[29671, 951, 2662, 97, 75, "Text"],
Cell[32336, 1050, 776, 30, 32, "Text"],
Cell[33115, 1082, 386, 9, 25, "Text"],
Cell[33504, 1093, 1288, 48, 27, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34829, 1146, 78, 0, 38, "Subsection"],
Cell[34910, 1148, 68, 0, 25, "Text"],
Cell[34981, 1150, 63, 0, 25, "Text"],
Cell[35047, 1152, 659, 26, 25, "Text"],
Cell[35709, 1180, 348, 12, 43, "Text"],
Cell[36060, 1194, 1400, 50, 58, "Text"],
Cell[37463, 1246, 643, 22, 57, "Text"],
Cell[38109, 1270, 1793, 61, 82, "Text"],
Cell[39905, 1333, 454, 18, 43, "Text"],
Cell[40362, 1353, 698, 24, 66, "Text"],
Cell[41063, 1379, 344, 15, 25, "Text"],
Cell[41410, 1396, 574, 22, 25, "Text"],
Cell[41987, 1420, 758, 25, 48, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42794, 1451, 111, 4, 83, "Section"],
Cell[CellGroupData[{
Cell[42930, 1459, 97, 5, 53, "Subsubsection"],
Cell[43030, 1466, 322, 7, 87, "Text"],
Cell[43355, 1475, 144, 5, 15, "Caption"],
Cell[43502, 1482, 480, 19, 117, "Text"],
Cell[43985, 1503, 51, 0, 25, "Text"],
Cell[44039, 1505, 374, 13, 29, "Input"],
Cell[44416, 1520, 203, 7, 29, "Input"],
Cell[44622, 1529, 73, 2, 25, "Text"],
Cell[44698, 1533, 99, 3, 29, "Input"],
Cell[44800, 1538, 338, 12, 29, "Input"],
Cell[45141, 1552, 130, 5, 25, "Text"],
Cell[CellGroupData[{
Cell[45296, 1561, 107, 3, 29, "Input"],
Cell[45406, 1566, 52, 1, 24, "Output"]
}, Open  ]],
Cell[45473, 1570, 174, 6, 25, "Text"],
Cell[45650, 1578, 92, 3, 29, "Input"],
Cell[45745, 1583, 206, 6, 25, "Text"],
Cell[45954, 1591, 674, 21, 85, "Input"],
Cell[46631, 1614, 64, 0, 25, "Text"],
Cell[46698, 1616, 853, 28, 61, "Input"],
Cell[47554, 1646, 60, 0, 25, "Text"],
Cell[47617, 1648, 744, 23, 59, "Input"],
Cell[48364, 1673, 3144, 101, 213, "Text"],
Cell[51511, 1776, 71, 2, 25, "Text"],
Cell[51585, 1780, 247, 8, 29, "Input"],
Cell[51835, 1790, 65, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[51925, 1794, 259, 8, 29, "Input"],
Cell[52187, 1804, 521, 14, 24, "Output"]
}, Open  ]],
Cell[52723, 1821, 292, 6, 43, "Text"],
Cell[CellGroupData[{
Cell[53040, 1831, 967, 30, 98, "Input"],
Cell[54010, 1863, 209, 5, 27, "Output"]
}, Open  ]],
Cell[54234, 1871, 133, 5, 25, "Text"],
Cell[CellGroupData[{
Cell[54392, 1880, 161, 5, 29, "Input"],
Cell[54556, 1887, 74, 1, 24, "Output"]
}, Open  ]],
Cell[54645, 1891, 48, 0, 25, "Text"],
Cell[54696, 1893, 629, 21, 60, "Input"],
Cell[55328, 1916, 32, 0, 25, "Text"],
Cell[55363, 1918, 105, 3, 29, "Input"],
Cell[CellGroupData[{
Cell[55493, 1925, 125, 4, 29, "Input"],
Cell[55621, 1931, 1426, 46, 54, "Output"]
}, Open  ]],
Cell[57062, 1980, 99, 2, 25, "Text"],
Cell[57164, 1984, 96, 2, 29, "Input"],
Cell[57263, 1988, 295, 8, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[57561, 1998, 150, 4, 17, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[57714, 2004, 453, 14, 47, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[58170, 2020, 105, 2, 17, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[58278, 2024, 558, 15, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[58839, 2041, 230, 6, 72, "Input",
 CellTags->"S5.34.1"],
Cell[59072, 2049, 401, 11, 52, "Input"],
Cell[59476, 2062, 315, 8, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[59794, 2072, 495, 11, 48, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[60292, 2085, 321, 8, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[60616, 2095, 207, 5, 28, "CompatibilityInput",
 CellTags->{"S5.37.1", "compatibility-no"}],
Cell[60826, 2102, 861, 22, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[61690, 2126, 113, 2, 29, "Input",
 CellTags->{"S5.37.1", "compatibility-yes"}],
Cell[61806, 2130, 315, 8, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[62124, 2140, 495, 11, 48, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[62622, 2153, 321, 8, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[62946, 2163, 1256, 37, 117, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[64205, 2202, 861, 22, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[65069, 2226, 1183, 35, 118, "Input",
 CellTags->"compatibility-yes"],
Cell[66255, 2263, 288, 7, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[66546, 2272, 222, 5, 27, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[66771, 2279, 294, 7, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[67068, 2288, 261, 8, 28, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[67332, 2298, 783, 20, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[CellGroupData[{
Cell[68140, 2322, 271, 9, 29, "Input",
 CellTags->"compatibility-yes"],
Cell[68414, 2333, 2613, 46, 207, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[71042, 2382, 342, 14, 15, "Caption"],
Cell[71387, 2398, 91, 2, 25, "Text"],
Cell[71481, 2402, 250, 6, 33, "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[71734, 2410, 186, 4, 27, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[71923, 2416, 256, 6, 29, "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[72182, 2424, 443, 13, 28, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[72628, 2439, 572, 14, 44, "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[CellGroupData[{
Cell[73225, 2457, 459, 14, 29, "Input",
 CellTags->"compatibility-yes"],
Cell[73687, 2473, 5459, 93, 177, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[79161, 2569, 307, 14, 15, "Caption"],
Cell[79471, 2585, 43, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[79539, 2589, 188, 6, 29, "Input"],
Cell[79730, 2597, 155, 5, 24, "Output"]
}, Open  ]],
Cell[79900, 2605, 19, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[79944, 2609, 81, 2, 29, "Input"],
Cell[80028, 2613, 55, 1, 24, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80132, 2620, 148, 7, 36, "Subsubsection"],
Cell[80283, 2629, 383, 10, 43, "Text"],
Cell[80669, 2641, 5798, 159, 507, "Input"],
Cell[86470, 2802, 242, 6, 43, "Text"],
Cell[CellGroupData[{
Cell[86737, 2812, 146, 3, 29, "Input"],
Cell[86886, 2817, 1876, 57, 81, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88799, 2879, 293, 10, 29, "Input"],
Cell[89095, 2891, 55, 1, 24, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[89211, 2899, 35, 0, 83, "Section"],
Cell[CellGroupData[{
Cell[89271, 2903, 87, 2, 36, "Subsubsection"],
Cell[89361, 2907, 212, 5, 69, "Text"],
Cell[89576, 2914, 292, 11, 29, "Input"],
Cell[89871, 2927, 250, 6, 33, "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[90124, 2935, 266, 6, 28, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[90393, 2943, 256, 6, 29, "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[90652, 2951, 535, 17, 51, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[91190, 2970, 554, 14, 44, "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[91747, 2986, 523, 17, 52, "Input",
 CellTags->"compatibility-yes"],
Cell[92273, 3005, 66, 0, 25, "Text"],
Cell[92342, 3007, 165, 6, 29, "Input"],
Cell[92510, 3015, 250, 6, 33, "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[92763, 3023, 296, 7, 28, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[93062, 3032, 256, 6, 29, "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[93321, 3040, 1001, 32, 73, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[94325, 3074, 548, 14, 44, "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[94876, 3090, 1071, 34, 74, "Input",
 CellTags->"compatibility-yes"],
Cell[95950, 3126, 48, 0, 25, "Text"],
Cell[96001, 3128, 260, 8, 29, "Input"],
Cell[96264, 3138, 838, 30, 52, "Input"],
Cell[97105, 3170, 315, 8, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[97423, 3180, 495, 11, 48, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[97921, 3193, 321, 8, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[98245, 3203, 874, 24, 95, "CompatibilityInput",
 CellTags->{"S5.37.1", "compatibility-no"}],
Cell[99122, 3229, 861, 22, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-oldpackage-Graphics`MultipleListPlot`"}],
Cell[99986, 3253, 294, 6, 72, "Input",
 CellTags->{"S5.37.1", "compatibility-yes"}],
Cell[100283, 3261, 99, 2, 25, "Text"],
Cell[100385, 3265, 98, 3, 29, "Input"],
Cell[100486, 3270, 102, 5, 25, "Text"],
Cell[100591, 3277, 93, 3, 29, "Input"],
Cell[100687, 3282, 31, 0, 25, "Text"],
Cell[100721, 3284, 190, 5, 29, "Input"],
Cell[100914, 3291, 49, 0, 25, "Text"],
Cell[100966, 3293, 369, 13, 51, "Input",
 CellTags->"S5.34.1"],
Cell[101338, 3308, 295, 8, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[101636, 3318, 150, 4, 17, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[101789, 3324, 453, 14, 47, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[102245, 3340, 105, 2, 17, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[102353, 3344, 558, 15, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", 
   "compatibilitytag-nosugg-plotpoints"}],
Cell[102914, 3361, 740, 24, 52, "Input"],
Cell[103657, 3387, 250, 6, 33, "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[103910, 3395, 400, 10, 48, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[104313, 3407, 256, 6, 29, "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[104572, 3415, 412, 13, 51, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[104987, 3430, 497, 13, 44, "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[CellGroupData[{
Cell[105509, 3447, 429, 14, 52, "Input",
 CellTags->"compatibility-yes"],
Cell[105941, 3463, 3283, 57, 137, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[109239, 3523, 272, 10, 15, "Caption"],
Cell[109514, 3535, 92, 2, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109643, 3542, 89, 2, 36, "Subsubsection"],
Cell[109735, 3546, 145, 3, 25, "Text"],
Cell[109883, 3551, 55, 0, 25, "Text"],
Cell[109941, 3553, 237, 7, 31, "Input"],
Cell[110181, 3562, 239, 7, 31, "Input"],
Cell[110423, 3571, 234, 7, 31, "Input"],
Cell[110660, 3580, 236, 7, 31, "Input"],
Cell[110899, 3589, 62, 0, 25, "Text"],
Cell[110964, 3591, 452, 15, 45, "Input"],
Cell[111419, 3608, 493, 16, 45, "Input"],
Cell[111915, 3626, 45, 0, 25, "Text"],
Cell[111963, 3628, 493, 14, 52, "Input"],
Cell[112459, 3644, 494, 14, 52, "Input"],
Cell[112956, 3660, 288, 7, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[113247, 3669, 222, 5, 27, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[113472, 3676, 294, 7, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[113769, 3685, 295, 9, 28, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[114067, 3696, 783, 20, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[CellGroupData[{
Cell[114875, 3720, 305, 10, 29, "Input",
 CellTags->"compatibility-yes"],
Cell[115183, 3732, 1694, 31, 223, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[116892, 3766, 114, 3, 15, "Caption"],
Cell[117009, 3771, 85, 2, 25, "Text"],
Cell[117097, 3775, 152, 5, 29, "Input"],
Cell[117252, 3782, 53, 0, 25, "Text"],
Cell[117308, 3784, 356, 12, 29, "Input"],
Cell[CellGroupData[{
Cell[117689, 3800, 84, 2, 29, "Input"],
Cell[117776, 3804, 53, 1, 24, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117866, 3810, 89, 2, 29, "Input"],
Cell[117958, 3814, 98, 3, 24, "Output"]
}, Open  ]],
Cell[118071, 3820, 200, 8, 25, "Text"],
Cell[118274, 3830, 126, 4, 29, "Input"],
Cell[118403, 3836, 916, 30, 59, "Input"],
Cell[119322, 3868, 100, 5, 25, "Text"],
Cell[119425, 3875, 94, 3, 29, "Input"],
Cell[119522, 3880, 31, 0, 25, "Text"],
Cell[119556, 3882, 190, 5, 29, "Input"],
Cell[119749, 3889, 49, 0, 25, "Text"],
Cell[119801, 3891, 398, 14, 51, "Input",
 CellTags->"S5.34.1"],
Cell[120202, 3907, 288, 7, 33, "CompatibilityTextTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[120493, 3916, 222, 5, 27, "CompatibilityText",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[120718, 3923, 294, 7, 29, "CompatibilityInputTop",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[121015, 3932, 269, 8, 28, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[121287, 3942, 783, 20, 67, "CompatibilityControls",
 CellTags->{
  "compatibility-yes", "compatibility-no", "compatibilitytag-semicolon-Show"}],
Cell[CellGroupData[{
Cell[122095, 3966, 279, 9, 29, "Input",
 CellTags->"compatibility-yes"],
Cell[122377, 3977, 4479, 77, 236, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[126871, 4057, 127, 3, 15, "Caption"],
Cell[127001, 4062, 114, 3, 25, "Text"],
Cell[127118, 4067, 757, 25, 52, "Input"],
Cell[127878, 4094, 793, 26, 52, "Input"],
Cell[128674, 4122, 250, 6, 33, "CompatibilityTextTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[128927, 4130, 400, 10, 48, "CompatibilityText",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[129330, 4142, 256, 6, 29, "CompatibilityInputTop",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[129589, 4150, 302, 9, 28, "CompatibilityInput",
 CellTags->"compatibility-no"],
Cell[129894, 4161, 497, 13, 44, "CompatibilityControls",
 CellTags->{"compatibility-yes", "compatibility-no"}],
Cell[CellGroupData[{
Cell[130416, 4178, 315, 10, 29, "Input",
 CellTags->"compatibility-yes"],
Cell[130734, 4190, 22742, 376, 169, "Graphics",
 Evaluatable->False]
}, Open  ]],
Cell[153491, 4569, 120, 3, 15, "Caption"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153660, 4578, 42, 0, 83, "Section"],
Cell[153705, 4580, 132, 4, 51, "Text"],
Cell[153840, 4586, 136996, 2250, 87, "Graphics",
 Evaluatable->False],
Cell[290839, 6838, 88, 1, 15, "Caption"],
Cell[290930, 6841, 73027, 1200, 60, "Graphics",
 Evaluatable->False],
Cell[363960, 8043, 86, 1, 15, "Caption"],
Cell[364049, 8046, 468, 9, 87, "Text"],
Cell[364520, 8057, 338, 9, 74, "Input"],
Cell[364861, 8068, 339, 9, 74, "Input"],
Cell[365203, 8079, 339, 9, 74, "Input"],
Cell[365545, 8090, 330, 9, 74, "Input"],
Cell[365878, 8101, 339, 9, 74, "Input"],
Cell[366220, 8112, 338, 9, 74, "Input"],
Cell[366561, 8123, 338, 9, 74, "Input"],
Cell[366902, 8134, 338, 9, 74, "Input"],
Cell[367243, 8145, 338, 9, 74, "Input"],
Cell[367584, 8156, 339, 9, 74, "Input"],
Cell[367926, 8167, 65, 0, 25, "Text"],
Cell[367994, 8169, 340, 9, 74, "Input"],
Cell[368337, 8180, 339, 9, 74, "Input"],
Cell[368679, 8191, 339, 9, 74, "Input"],
Cell[369021, 8202, 336, 9, 74, "Input"],
Cell[369360, 8213, 340, 9, 74, "Input"],
Cell[369703, 8224, 339, 9, 74, "Input"],
Cell[370045, 8235, 335, 9, 74, "Input"],
Cell[370383, 8246, 337, 9, 74, "Input"],
Cell[370723, 8257, 339, 9, 74, "Input"],
Cell[371065, 8268, 339, 9, 74, "Input"],
Cell[371407, 8279, 139, 3, 25, "Text"],
Cell[371549, 8284, 321, 8, 52, "Input"],
Cell[371873, 8294, 106, 3, 25, "Text"],
Cell[371982, 8299, 413, 13, 29, "Input"],
Cell[372398, 8314, 56, 0, 25, "Text"],
Cell[372457, 8316, 125, 4, 29, "Input"],
Cell[372585, 8322, 916, 30, 59, "Input"],
Cell[373504, 8354, 20, 0, 25, "Text"],
Cell[373527, 8356, 93, 3, 29, "Input"],
Cell[373623, 8361, 46, 0, 25, "Text"],
Cell[373672, 8363, 190, 5, 29, "Input"],
Cell[CellGroupData[{
Cell[373887, 8372, 160, 5, 29, "Input"],
Cell[374050, 8379, 3115, 94, 152, "Output"]
}, Open  ]],
Cell[377180, 8476, 50, 0, 25, "Text"],
Cell[377233, 8478, 1274, 37, 74, "Input"],
Cell[378510, 8517, 48, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[378583, 8521, 288, 9, 29, "Input"],
Cell[378874, 8532, 194, 6, 24, "Output"]
}, Open  ]],
Cell[379083, 8541, 69, 0, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379189, 8546, 29, 0, 83, "Section"],
Cell[379221, 8548, 1165, 27, 247, "Reference"]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

